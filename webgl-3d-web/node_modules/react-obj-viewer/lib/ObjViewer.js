"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var THREE = _interopRequireWildcard(require("three"));

var _threeObjMtlLoader = require("three-obj-mtl-loader");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ObjViewer =
/*#__PURE__*/
function (_Component) {
  _inherits(ObjViewer, _Component);

  function ObjViewer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ObjViewer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ObjViewer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentDidMount", function () {
      var _this$props = _this.props,
          width = _this$props.width,
          height = _this$props.height,
          model = _this$props.model;
      _this.container;
      _this.camera;
      _this.scene;
      _this.rederer;
      _this.mouseX = 0;
      _this.mouseY = 0;
      _this.windowHalfX = width / 2;
      _this.windowHalfY = height / 2;
      _this.object;
      _this.parent;
      _this.container = document.createElement('div');
      _this.elem = document.getElementById(model);

      _this.elem.appendChild(_this.container);

      _this.init();

      _this.animate();

      _this.elem.addEventListener('mousemove', _this.onDocumentMouseMove, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentWillUnmount", function () {
      _this.elem.removeEventListener('mousemove', _this.onDocumentMouseMove, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "init", function () {
      var _this$props2 = _this.props,
          model = _this$props2.model,
          material = _this$props2.material,
          width = _this$props2.width,
          height = _this$props2.height,
          boundingBox = _this$props2.boundingBox,
          axis = _this$props2.axis;
      _this.camera = new THREE.PerspectiveCamera(45, width / height, 1, 2000);
      _this.camera.position.z = 40; // scene

      _this.scene = new THREE.Scene();
      var ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);

      _this.scene.add(ambientLight);

      var pointLight = new THREE.PointLight(0xffffff, 0.8);

      _this.camera.add(pointLight);

      _this.scene.add(_this.camera);

      if (axis) {
        var axisHelper = new THREE.AxisHelper(100);

        _this.scene.add(axisHelper);
      } // manager


      var loadModel = function loadModel() {
        _this.object.traverse(function (child) {
          if (child.isMesh && material) child.material.map = texture;
        }); // this.object.position.y = - 95;


        var boundObject = new THREE.Box3().setFromObject(_this.object);
        var sizeOfObject = boundObject.getSize();
        var largestEdge, toScale;

        if (sizeOfObject.x > sizeOfObject.y && sizeOfObject.x > sizeOfObject.z) {
          largestEdge = sizeOfObject.x;
        } else if (sizeOfObject.y > sizeOfObject.x && sizeOfObject.y > sizeOfObject.z) {
          largestEdge = sizeOfObject.y;
        } else if (sizeOfObject.z > sizeOfObject.y && sizeOfObject.z > sizeOfObject.x) {
          largestEdge = sizeOfObject.z;
        } else {
          console.log('no match');
        }

        toScale = 30 / largestEdge;

        _this.object.scale.set(1 * toScale, 1 * toScale, 1 * toScale);

        new THREE.Box3().setFromObject(_this.object).getCenter(_this.object.position).multiplyScalar(-1);

        _this.scene.add(_this.object);

        if (boundingBox) {
          var box = new THREE.BoxHelper(_this.object, 0xff0000);

          _this.scene.add(box);
        }
      };

      var manager = new THREE.LoadingManager(loadModel);

      manager.onProgress = function (item, loaded, total) {
        console.log(item, loaded, total);
      }; // texture


      if (material) {
        var textureLoader = new THREE.TextureLoader(manager);
        var texture = textureLoader.load(material);
      } // model


      function onProgress(xhr) {
        if (xhr.lengthComputable) {
          var percentComplete = xhr.loaded / xhr.total * 100;
          console.log('model ' + Math.round(percentComplete, 2) + '% downloaded');
        }
      }

      function onError(xhr) {}

      var loader = new _threeObjMtlLoader.OBJLoader(manager);
      loader.load(model, function (obj) {
        _this.object = obj;
      }, onProgress, onError); //

      _this.renderer = new THREE.WebGLRenderer();

      _this.renderer.setPixelRatio(window.devicePixelRatio);

      _this.renderer.setSize(width, height);

      _this.container.appendChild(_this.renderer.domElement);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDocumentMouseMove", function (event) {
      _this.mouseX = (event.layerX - _this.windowHalfX) / 2;
      _this.mouseY = (event.layerY - _this.windowHalfY) / 2;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "animate", function () {
      requestAnimationFrame(_this.animate.bind(_assertThisInitialized(_assertThisInitialized(_this))));

      _this.renderView();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderView", function () {
      _this.camera.position.x += (_this.mouseX - _this.camera.position.x) * .05;
      _this.camera.position.y += (-_this.mouseY - _this.camera.position.y) * .05;

      _this.camera.lookAt(_this.scene.position);

      _this.renderer.render(_this.scene, _this.camera);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "render", function () {
      var _this$props3 = _this.props,
          model = _this$props3.model,
          width = _this$props3.width,
          height = _this$props3.height;
      return _react.default.createElement(_react.Fragment, null, _react.default.createElement("div", {
        id: model,
        style: {
          width: width,
          height: height
        }
      }));
    });

    return _this;
  }

  return ObjViewer;
}(_react.Component);

ObjViewer.defaultProps = {
  width: 200,
  height: 200,
  boundingBox: false,
  axis: false
};
var _default = ObjViewer;
exports.default = _default;