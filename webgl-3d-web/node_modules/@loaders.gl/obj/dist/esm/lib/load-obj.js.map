{"version":3,"sources":["../../../src/lib/load-obj.js"],"names":["getMeshBoundingBox","parseOBJ","loadOBJ","text","options","meshes","vertexCount","reduce","s","mesh","header","attributes","mergeAttributes","loaderData","boundingBox","mode","positions","Float32Array","normals","colors","uvs","i","POSITION","NORMAL","COLOR_0","TEXCOORD_0","set","value","length","size"],"mappings":"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","sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/loader-utils';\nimport parseOBJ from './parse-obj';\n\nexport default function loadOBJ(text, options) {\n  const {meshes} = parseOBJ(text);\n\n  const vertexCount = meshes.reduce((s, mesh) => s + mesh.header.vertexCount, 0);\n  // TODO - render objects separately\n  const attributes = mergeAttributes(meshes, vertexCount);\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    // Normalised data\n    header: {\n      vertexCount,\n      boundingBox: getMeshBoundingBox(attributes)\n    },\n    mode: 4, // TRIANGLES\n\n    attributes\n  };\n}\n\n// eslint-disable-next-line max-statements\nfunction mergeAttributes(meshes, vertexCount) {\n  const positions = new Float32Array(vertexCount * 3);\n  let normals;\n  let colors;\n  let uvs;\n  let i = 0;\n\n  for (const mesh of meshes) {\n    const {POSITION, NORMAL, COLOR_0, TEXCOORD_0} = mesh.attributes;\n\n    positions.set(POSITION.value, i * 3);\n\n    if (NORMAL) {\n      normals = normals || new Float32Array(vertexCount * 3);\n      normals.set(NORMAL.value, i * 3);\n    }\n    if (COLOR_0) {\n      colors = colors || new Float32Array(vertexCount * 3);\n      colors.set(COLOR_0.value, i * 3);\n    }\n    if (TEXCOORD_0) {\n      uvs = uvs || new Float32Array(vertexCount * 2);\n      uvs.set(TEXCOORD_0.value, i * 2);\n    }\n\n    i += POSITION.value.length / 3;\n  }\n\n  const attributes = {};\n  attributes.POSITION = {value: positions, size: 3};\n\n  if (normals) {\n    attributes.NORMAL = {value: normals, size: 3};\n  }\n  if (colors) {\n    attributes.COLOR_0 = {value: colors, size: 3};\n  }\n  if (uvs) {\n    attributes.TEXCOORD_0 = {value: uvs, size: 2};\n  }\n\n  return attributes;\n}\n"],"file":"load-obj.js"}