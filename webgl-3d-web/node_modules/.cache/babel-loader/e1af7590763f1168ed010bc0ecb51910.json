{"ast":null,"code":"import _toConsumableArray from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _initializerDefineProperty from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";import _classCallCheck from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _applyDecoratedDescriptor from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";import _initializerWarningHelper from\"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";var _class,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_descriptor6,_descriptor7,_descriptor8,_descriptor9,_descriptor10,_descriptor11,_descriptor12,_descriptor13,_descriptor14,_descriptor15,_descriptor16,_descriptor17,_temp;import{observable,action,runInAction}from\"mobx\";import{apiService}from\"./api_service.js\";import{FlyToInterpolator,LinearInterpolator}from\"react-map-gl\";import MAP_STYLE from\"../map-style-basic-v8.json\";import WebMercatorViewport from\"viewport-mercator-project\";var DataStore=(_class=(_temp=/*#__PURE__*/function(){function DataStore(){_classCallCheck(this,DataStore);_initializerDefineProperty(this,\"modelViewerState\",_descriptor,this);_initializerDefineProperty(this,\"useStaticAssets\",_descriptor2,this);_initializerDefineProperty(this,\"useDynamicAssets\",_descriptor3,this);_initializerDefineProperty(this,\"errorState\",_descriptor4,this);_initializerDefineProperty(this,\"assets\",_descriptor5,this);_initializerDefineProperty(this,\"assetsLoadingState\",_descriptor6,this);_initializerDefineProperty(this,\"dataPanelContent\",_descriptor7,this);_initializerDefineProperty(this,\"mapStyle\",_descriptor8,this);_initializerDefineProperty(this,\"connectivityData\",_descriptor9,this);_initializerDefineProperty(this,\"subNetConectivity\",_descriptor10,this);_initializerDefineProperty(this,\"stagedConnectivityData\",_descriptor11,this);_initializerDefineProperty(this,\"electricDevicesLayer\",_descriptor12,this);_initializerDefineProperty(this,\"dateFilter\",_descriptor13,this);_initializerDefineProperty(this,\"statusFilter\",_descriptor14,this);_initializerDefineProperty(this,\"textFilter\",_descriptor15,this);_initializerDefineProperty(this,\"viewportCoordinates\",_descriptor16,this);_initializerDefineProperty(this,\"mapViewPort\",_descriptor17,this);}_createClass(DataStore,[{key:\"initiateMap\",value:function initiateMap(){var newViewport={width:\"fit\",height:\"100vh\",latitude:41.7833,longitude:-88.1678,zoom:17.8,pitch:0,bearing:0};this.mapViewPort=newViewport;this.getModelList();this.getConnectivityLayer(this.viewportCoordinates);// DO NOT REMOVE\n}},{key:\"refreshFilters\",value:function refreshFilters(){this.dataPanelContent=\"Please select a model to view data\";this.statusFilter=\"All\";this.dateFilter=new Date().getFullYear()+\"-\"+(new Date().getMonth()+1)+\"-\"+(new Date().getDate()+1);this.textFilter=\"\";}},{key:\"toggleStreetViewMode\",value:function toggleStreetViewMode(){if(this.mapViewPort.pitch===0){var newViewport={width:\"fit\",height:\"100vh\",longitude:this.mapViewPort.longitude,latitude:this.mapViewPort.latitude,zoom:this.mapViewPort.zoom,transitionInterpolator:new LinearInterpolator([\"pitch\"]),transitionDuration:1000,pitch:60,bearing:this.mapViewPort.bearing};this.mapViewPort=newViewport;}else{var _newViewport={width:\"fit\",height:\"100vh\",longitude:this.mapViewPort.longitude,latitude:this.mapViewPort.latitude,zoom:this.mapViewPort.zoom,transitionInterpolator:new LinearInterpolator([\"pitch\"]),transitionDuration:1000,pitch:0,bearing:this.mapViewPort.bearing};this.mapViewPort=_newViewport;}}},{key:\"setDataPanelModel\",value:function setDataPanelModel(model){this.dataPanelContent=model;}},{key:\"updateSearchDate\",value:function updateSearchDate(newDate){this.dateFilter=newDate.getFullYear()+\"-\"+(newDate.getMonth()+1)+\"-\"+newDate.getDate();}},{key:\"updateSearchStatus\",value:function updateSearchStatus(newStatus){this.statusFilter=newStatus;}},{key:\"updateSearchText\",value:function updateSearchText(newText){this.textFilter=newText;}//Change Map view port\n},{key:\"updateMapViewport\",value:function updateMapViewport(newViewport){this.mapViewPort=newViewport;var viewport=new WebMercatorViewport(newViewport);var vwportState=[];vwportState.push(viewport.unproject([0,viewport.height]),viewport.unproject([0,0]),viewport.unproject([viewport.width,0]),viewport.unproject([viewport.width,viewport.height]));this.viewportCoordinates=vwportState;}//Get list of models\n},{key:\"getModelList\",value:function(){var _getModelList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newAssets,dynamicAssets,staticAssets;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newAssets=[];this.assets=[];this.assetsLoadingState=true;_context.prev=3;if(!this.useDynamicAssets){_context.next=9;break;}_context.next=7;return apiService.getAssetsListAsync(this.viewportCoordinates,this.statusFilter,this.textFilter,this.dateFilter);case 7:dynamicAssets=_context.sent;if(dynamicAssets!=null&&dynamicAssets!=[]){newAssets=newAssets.concat(dynamicAssets);}case 9:if(!this.useStaticAssets){_context.next=14;break;}_context.next=12;return apiService.getAssetsListAsyncStatic();case 12:staticAssets=_context.sent;newAssets=newAssets.concat(staticAssets);case 14:this.assets=newAssets.filter(function(el){return'geometry'in el;});this.assetsLoadingState=false;_context.next=22;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](3);this.assetsLoadingState=false;this.errorState=true;case 22:this.refreshFilters();case 23:case\"end\":return _context.stop();}}},_callee,this,[[3,18]]);}));function getModelList(){return _getModelList.apply(this,arguments);}return getModelList;}()},{key:\"refeshConnectivityLayer\",value:function(){var _refeshConnectivityLayer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.getConnectivityLayer(this.viewportCoordinates);case 1:case\"end\":return _context2.stop();}}},_callee2,this);}));function refeshConnectivityLayer(){return _refeshConnectivityLayer.apply(this,arguments);}return refeshConnectivityLayer;}()//Get list of connectivity layers\n},{key:\"getConnectivityLayer\",value:function(){var _getConnectivityLayer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(viewData){var _this=this;var response,stagedData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return apiService.getConnectivtyDataAsync(viewData);case 2:response=_context3.sent;_context3.next=5;return apiService.getStagedConnectivtyDataAsync();case 5:stagedData=_context3.sent;runInAction(function(){_this.formatConnectivityData(response);_this.formatStagedConnectivityData(stagedData);});case 7:case\"end\":return _context3.stop();}}},_callee3);}));function getConnectivityLayer(_x){return _getConnectivityLayer.apply(this,arguments);}return getConnectivityLayer;}()},{key:\"formatConnectivityData\",value:function(){var _formatConnectivityData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data){var _this2=this;var subnetLines,electricDevices;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:subnetLines=[];electricDevices=[];// eslint-disable-next-line\nObject.entries(data).map(function(x){switch(x[0]){case\"100\"://electric devices\n// eslint-disable-next-line\nx[1].features.map(function(eleDevices){var lay=[eleDevices.geometry[\"x\"],eleDevices.geometry[\"y\"]];electricDevices.push([lay]);});_this2.electricDevicesLayer=electricDevices||null;break;case\"105\"://electric assemblies\nbreak;case\"110\"://electric junction\nbreak;case\"115\"://electric lines\nbreak;case\"903\":// electric sublines\ncase\"120\":// eslint-disable-next-line\nx[1].features.map(function(subnet){// eslint-disable-next-line\nsubnet.geometry.paths.map(function(individualPath){var lay=individualPath.reduce(function(pV,cV){return[].concat(_toConsumableArray(pV),[[cV[0],cV[1],8.6]]);},[]);subnetLines.push([lay]);});});_this2.subNetConectivity=subnetLines||null;break;case\"900\":// structure junction\nbreak;case\"905\":// structure line\nbreak;case\"910\":// structure boundary\nbreak;}});case 3:case\"end\":return _context4.stop();}}},_callee4);}));function formatConnectivityData(_x2){return _formatConnectivityData.apply(this,arguments);}return formatConnectivityData;}()},{key:\"formatStagedConnectivityData\",value:function(){var _formatStagedConnectivityData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data){var _this3=this;var subnetStagedLines;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:subnetStagedLines=[];// eslint-disable-next-line\nObject.entries(data).map(function(x){switch(x[0]){case\"0\":// points\nbreak;case\"1\"://lines\n// eslint-disable-next-line\nx[1].features.map(function(subnet){// eslint-disable-next-line\nsubnet.geometry.paths.map(function(individualPath){var lay=individualPath.reduce(function(pV,cV){return[].concat(_toConsumableArray(pV),[[cV[0],cV[1],8.6]]);},[]);subnetStagedLines.push([lay]);});});_this3.stagedConnectivityData=subnetStagedLines||null;break;case\"2\"://electric junction\nbreak;}});case 2:case\"end\":return _context5.stop();}}},_callee5);}));function formatStagedConnectivityData(_x3){return _formatStagedConnectivityData.apply(this,arguments);}return formatStagedConnectivityData;}()//Model selected in menu\n//Updates viewport and renders models near selected model\n},{key:\"setSelectedModel\",value:function(){var _setSelectedModel=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(model){var newViewport;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:newViewport={width:\"fit\",height:\"100vh\",longitude:model.geometry.X,latitude:model.geometry.Y,zoom:18,transitionInterpolator:new FlyToInterpolator({speed:3}),transitionDuration:\"auto\",pitch:0,bearing:0};this.mapViewPort=newViewport;this.setDataPanelModel(model);case 3:case\"end\":return _context6.stop();}}},_callee6,this);}));function setSelectedModel(_x4){return _setSelectedModel.apply(this,arguments);}return setSelectedModel;}()},{key:\"setMapStyle\",value:function(){var _setMapStyle=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(map){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:this.mapStyle=map;case 1:case\"end\":return _context7.stop();}}},_callee7,this);}));function setMapStyle(_x5){return _setMapStyle.apply(this,arguments);}return setMapStyle;}()},{key:\"setConnectivityModel\",value:function(){var _setConnectivityModel=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data){var finalArray,filteredData;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:/**\n     * we need to convert the double linked list from the API response to\n     * a slightly more complext object. This data format takes a line first apporach.\n     * Null nodes can be discarded and from <-> to relationships must be specifically\n     * defined\n     *\n     * Data format:\n     * [\n     *   {\n     *     from: {\n     *       coordinates: [-122.269029, 37.80787]\n     *     },\n     *     to: {\n     *       coordinates: [-122.271604, 37.803664]\n     *   },\n     * ]\n     *\n     */ // eslint-disable-next-line\nfinalArray=[];filteredData=data.filter(function(x){return x.from_id!=null&&x.to_id!=null&&x.is_connected===true;});// eslint-disable-next-line\nfilteredData.map(function(obj){var derivedObjectFrom={from:{coordinates:[data.find(function(element){return element.id===obj.from_id;}).longitude,data.find(function(element){return element.id===obj.from_id;}).latitude]},to:{coordinates:[data.find(function(element){return element.id===obj.id;}).longitude,data.find(function(element){return element.id===obj.id;}).latitude]}};var derivedObjectTo={from:{coordinates:[data.find(function(element){return element.id===obj.id;}).longitude,data.find(function(element){return element.id===obj.id;}).latitude]},to:{coordinates:[data.find(function(element){return element.id===obj.to_id;}).longitude,data.find(function(element){return element.id===obj.to_id;}).latitude]}};finalArray.push(derivedObjectTo);finalArray.push(derivedObjectFrom);});this.connectivityData=finalArray;case 4:case\"end\":return _context8.stop();}}},_callee8,this);}));function setConnectivityModel(_x6){return _setConnectivityModel.apply(this,arguments);}return setConnectivityModel;}()//   @action async fetchCoordinatesConnectivityMock() {\n//     /**\n//      * Data format: pathLayer\n//      * [\n//      *   {\n//      *     path: [[-122.4, 37.7], [-122.5, 37.8], [-122.6, 37.85]],\n//      *     name: 'Richmond - Millbrae',\n//      *     color: [255, 0, 0]\n//      *   },\n//      *   ...\n//      * ]\n//      */\n//     const connectivityLayers: any = [];\n//     mockConnectivityDataSubNet6.map((convertedLayers: any) => {\n//       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n//         const x = [cV.x, cV.y];\n//         return [...pV, x];\n//       }, []);\n//       connectivityLayers.push([lay]);\n//     });\n//     mockConnectivityDataSubNet7.map((convertedLayers: any) => {\n//       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n//         const x = [cV.x, cV.y];\n//         return [...pV, x];\n//       }, []);\n//       connectivityLayers.push([lay]);\n//     });\n//     this.subNetConectivity = connectivityLayers || null;\n// }\n}]);return DataStore;}(),_temp),(_descriptor=_applyDecoratedDescriptor(_class.prototype,\"modelViewerState\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return true;}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,\"useStaticAssets\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return true;}}),_descriptor3=_applyDecoratedDescriptor(_class.prototype,\"useDynamicAssets\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return false;}}),_descriptor4=_applyDecoratedDescriptor(_class.prototype,\"errorState\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return false;}}),_descriptor5=_applyDecoratedDescriptor(_class.prototype,\"assets\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return[];}}),_descriptor6=_applyDecoratedDescriptor(_class.prototype,\"assetsLoadingState\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return true;}}),_descriptor7=_applyDecoratedDescriptor(_class.prototype,\"dataPanelContent\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return\"Please select a model to view data\";}}),_descriptor8=_applyDecoratedDescriptor(_class.prototype,\"mapStyle\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return MAP_STYLE;}}),_descriptor9=_applyDecoratedDescriptor(_class.prototype,\"connectivityData\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return null;}}),_descriptor10=_applyDecoratedDescriptor(_class.prototype,\"subNetConectivity\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return[];}}),_descriptor11=_applyDecoratedDescriptor(_class.prototype,\"stagedConnectivityData\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return[];}}),_descriptor12=_applyDecoratedDescriptor(_class.prototype,\"electricDevicesLayer\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return[];}}),_descriptor13=_applyDecoratedDescriptor(_class.prototype,\"dateFilter\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return new Date().getFullYear()+\"-\"+(new Date().getMonth()+1)+\"-\"+(new Date().getDate()+1);}}),_descriptor14=_applyDecoratedDescriptor(_class.prototype,\"statusFilter\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return\"All\";}}),_descriptor15=_applyDecoratedDescriptor(_class.prototype,\"textFilter\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return\"\";}}),_descriptor16=_applyDecoratedDescriptor(_class.prototype,\"viewportCoordinates\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return[[-88.17231208338957,41.78164438640926],[-88.17231208338957,41.784532458674306],[-88.16407233729582,41.784532458674306],[-88.16407233729582,41.78164438640926]];}}),_descriptor17=_applyDecoratedDescriptor(_class.prototype,\"mapViewPort\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return{width:\"fit\",height:\"100vh\",latitude:0,longitude:0,zoom:2,pitch:0,bearing:0};}}),_applyDecoratedDescriptor(_class.prototype,\"initiateMap\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"initiateMap\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"refreshFilters\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"refreshFilters\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"toggleStreetViewMode\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"toggleStreetViewMode\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"setDataPanelModel\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"setDataPanelModel\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"updateSearchDate\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"updateSearchDate\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"updateSearchStatus\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"updateSearchStatus\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"updateSearchText\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"updateSearchText\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"updateMapViewport\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"updateMapViewport\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"getModelList\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"getModelList\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"refeshConnectivityLayer\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"refeshConnectivityLayer\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"getConnectivityLayer\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"getConnectivityLayer\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"formatConnectivityData\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"formatConnectivityData\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"formatStagedConnectivityData\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"formatStagedConnectivityData\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"setSelectedModel\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"setSelectedModel\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"setMapStyle\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"setMapStyle\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"setConnectivityModel\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"setConnectivityModel\"),_class.prototype)),_class);export{DataStore as default};","map":{"version":3,"sources":["/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/src/state-management/store.tsx"],"names":["observable","action","runInAction","apiService","FlyToInterpolator","LinearInterpolator","MAP_STYLE","WebMercatorViewport","DataStore","newViewport","width","height","latitude","longitude","zoom","pitch","bearing","mapViewPort","getModelList","getConnectivityLayer","viewportCoordinates","dataPanelContent","statusFilter","dateFilter","Date","getFullYear","getMonth","getDate","textFilter","transitionInterpolator","transitionDuration","model","newDate","newStatus","newText","viewport","vwportState","push","unproject","newAssets","assets","assetsLoadingState","useDynamicAssets","getAssetsListAsync","dynamicAssets","concat","useStaticAssets","getAssetsListAsyncStatic","staticAssets","filter","el","errorState","refreshFilters","viewData","getConnectivtyDataAsync","response","getStagedConnectivtyDataAsync","stagedData","formatConnectivityData","formatStagedConnectivityData","data","subnetLines","electricDevices","Object","entries","map","x","features","eleDevices","lay","geometry","electricDevicesLayer","subnet","paths","individualPath","reduce","pV","cV","subNetConectivity","subnetStagedLines","stagedConnectivityData","X","Y","speed","setDataPanelModel","mapStyle","finalArray","filteredData","from_id","to_id","is_connected","obj","derivedObjectFrom","from","coordinates","find","element","id","to","derivedObjectTo","connectivityData"],"mappings":"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","sourcesContent":["import { observable, action, runInAction } from \"mobx\";\n\nimport { apiService } from \"./api_service.js\";\nimport { FlyToInterpolator, LinearInterpolator } from \"react-map-gl\";\nimport MAP_STYLE from \"../map-style-basic-v8.json\";\nimport WebMercatorViewport from \"viewport-mercator-project\";\n\nexport default class DataStore {\n  @observable modelViewerState = true;\n  \n  @observable useStaticAssets = true;\n\n  //Set Boolen to true when changing to API calls\n  @observable useDynamicAssets = false;\n\n  @observable errorState = false;\n\n  @observable assets: any = [];\n  @observable assetsLoadingState = true;\n\n  @observable dataPanelContent = \"Please select a model to view data\";\n\n  @observable mapStyle = MAP_STYLE;\n  @observable connectivityData = null;\n\n  @observable subNetConectivity: any = [];\n  @observable stagedConnectivityData: any = [];\n  @observable electricDevicesLayer: any = [];\n  @observable dateFilter =\n    new Date().getFullYear() +\n    \"-\" +\n    (new Date().getMonth() + 1) +\n    \"-\" +\n    (new Date().getDate() + 1);\n\n  @observable statusFilter = \"All\";\n  @observable textFilter = \"\";\n  @observable viewportCoordinates = [\n    [-88.17231208338957,41.78164438640926],\n    [-88.17231208338957,41.784532458674306],\n    [-88.16407233729582,41.784532458674306],\n    [-88.16407233729582,41.78164438640926]\n  ];\n\n  @observable mapViewPort = {\n    width: \"fit\",\n    height: \"100vh\",\n    latitude: 0,\n    longitude: 0,\n    zoom: 2,\n    pitch: 0,\n    bearing: 0,\n  };\n\n  @action initiateMap(){\n    const newViewport = {\n      width: \"fit\",\n      height: \"100vh\",\n      latitude: 41.7833,\n      longitude: -88.1678,\n      zoom: 17.8,\n      pitch: 0,\n      bearing: 0,\n    };\n    this.mapViewPort = newViewport;\n    this.getModelList();\n    this.getConnectivityLayer(this.viewportCoordinates); // DO NOT REMOVE\n  }\n\n  @action refreshFilters(){\n    this.dataPanelContent = \"Please select a model to view data\";\n    this.statusFilter = \"All\";\n    this.dateFilter = \n    new Date().getFullYear() +\n    \"-\" +\n    (new Date().getMonth() + 1) +\n    \"-\" +\n    (new Date().getDate() + 1);\n    this.textFilter = \"\";\n  }\n\n  @action toggleStreetViewMode() {\n    if (this.mapViewPort.pitch === 0) {\n      const newViewport = {\n        width: \"fit\",\n        height: \"100vh\",\n        longitude: this.mapViewPort.longitude,\n        latitude: this.mapViewPort.latitude,\n        zoom: this.mapViewPort.zoom,\n        transitionInterpolator: new LinearInterpolator([\"pitch\"]),\n        transitionDuration: 1000,\n        pitch: 60,\n        bearing: this.mapViewPort.bearing,\n      };\n      this.mapViewPort = newViewport;\n    } else {\n      const newViewport = {\n        width: \"fit\",\n        height: \"100vh\",\n        longitude: this.mapViewPort.longitude,\n        latitude: this.mapViewPort.latitude,\n        zoom: this.mapViewPort.zoom,\n        transitionInterpolator: new LinearInterpolator([\"pitch\"]),\n        transitionDuration: 1000,\n        pitch: 0,\n        bearing: this.mapViewPort.bearing,\n      };\n      this.mapViewPort = newViewport;\n    }\n  }\n\n  @action setDataPanelModel(model: any) {\n    this.dataPanelContent = model;\n  }\n\n  @action updateSearchDate(newDate: any) {\n    this.dateFilter =\n      newDate.getFullYear() +\n      \"-\" +\n      (newDate.getMonth() + 1) +\n      \"-\" +\n      newDate.getDate();\n  }\n\n  @action updateSearchStatus(newStatus: any) {\n    this.statusFilter = newStatus;\n  }\n\n  @action updateSearchText(newText: any) {\n    this.textFilter = newText;\n  }\n\n  //Change Map view port\n  @action updateMapViewport(newViewport: any) {\n    this.mapViewPort = newViewport;\n    var viewport = new WebMercatorViewport(newViewport);\n    const vwportState = [] as any;\n    vwportState.push(\n      viewport.unproject([0, viewport.height]),\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height])\n    );\n    this.viewportCoordinates = vwportState;\n  }\n\n  //Get list of models\n  @action async getModelList() {\n    let newAssets: any[] = [];\n    this.assets = [];\n    this.assetsLoadingState = true;\n\n    try {\n      if (this.useDynamicAssets) {\n        const dynamicAssets = await apiService.getAssetsListAsync(\n          this.viewportCoordinates,\n          this.statusFilter,\n          this.textFilter,\n          this.dateFilter\n        );\n        if (dynamicAssets != null && dynamicAssets != []){\n          newAssets = newAssets.concat(dynamicAssets);\n        }\n      }\n\n      if (this.useStaticAssets) {\n        const staticAssets = await apiService.getAssetsListAsyncStatic();\n        newAssets = newAssets.concat(staticAssets);\n      }\n\n      this.assets = newAssets.filter(function (el : any) {\n        return 'geometry' in el \n      });\n\n      this.assetsLoadingState = false;\n    } catch {\n      this.assetsLoadingState = false;\n      this.errorState = true;\n    }\n    this.refreshFilters();\n  }\n\n  @action async refeshConnectivityLayer() {\n    this.getConnectivityLayer(this.viewportCoordinates);\n  }\n\n  //Get list of connectivity layers\n  @action async getConnectivityLayer(viewData: Array<Array<number>>) {\n    const response: Object = await apiService.getConnectivtyDataAsync(viewData);\n    const stagedData: Object = await apiService.getStagedConnectivtyDataAsync();\n    runInAction(() => {\n      this.formatConnectivityData(response);\n      this.formatStagedConnectivityData(stagedData);\n    });\n  }\n\n  @action async formatConnectivityData(data: Object) {\n    const subnetLines: any = [];\n    const electricDevices: any = [];\n    // eslint-disable-next-line\n    Object.entries(data).map((x: any) => {\n      switch (x[0]) {\n        case \"100\": //electric devices\n        // eslint-disable-next-line\n          x[1].features.map((eleDevices: any) => {\n            const lay = [eleDevices.geometry[\"x\"], eleDevices.geometry[\"y\"]];\n            electricDevices.push([lay]);\n          });\n          this.electricDevicesLayer = electricDevices || null;\n          break;\n        case \"105\": //electric assemblies\n          break;\n        case \"110\": //electric junction\n          break;\n        case \"115\": //electric lines\n          break;\n        case \"903\": // electric sublines\n        case \"120\":\n          // eslint-disable-next-line\n          x[1].features.map((subnet: any) => {\n            // eslint-disable-next-line\n            subnet.geometry.paths.map((individualPath: any) => {\n              const lay = individualPath.reduce((pV: any, cV: any) => {\n                return [...pV, [cV[0], cV[1], 8.6]];\n              }, []);\n              subnetLines.push([lay]);\n            });\n          });\n          this.subNetConectivity = subnetLines || null;\n          break;\n        case \"900\": // structure junction\n          break;\n        case \"905\": // structure line\n          break;\n        case \"910\": // structure boundary\n          break;\n      }\n    });\n  }\n\n  @action async formatStagedConnectivityData(data: Object) {\n    const subnetStagedLines: any = [];\n    // eslint-disable-next-line\n    Object.entries(data).map((x: any) => {\n      switch (x[0]) {\n        case \"0\": // points\n          break;\n        case \"1\": //lines\n        // eslint-disable-next-line\n          x[1].features.map((subnet: any) => {\n            // eslint-disable-next-line\n            subnet.geometry.paths.map((individualPath: any) => {\n              const lay = individualPath.reduce((pV: any, cV: any) => {\n                return [...pV, [cV[0], cV[1], 8.6]];\n              }, []);\n              subnetStagedLines.push([lay]);\n            });\n          });\n          this.stagedConnectivityData = subnetStagedLines || null;\n          break;\n        case \"2\": //electric junction\n          break;\n      }\n    });\n  }\n\n  //Model selected in menu\n  //Updates viewport and renders models near selected model\n  @action async setSelectedModel(model: any) {\n    const newViewport = {\n      width: \"fit\",\n      height: \"100vh\",\n      longitude: model.geometry.X,\n      latitude: model.geometry.Y,\n      zoom: 18,\n      transitionInterpolator: new FlyToInterpolator({ speed: 3 }),\n      transitionDuration: \"auto\",\n      pitch: 0,\n      bearing: 0,\n    };\n    this.mapViewPort = newViewport;\n    this.setDataPanelModel(model);\n  }\n\n  @action async setMapStyle(map: any) {\n    this.mapStyle = map;\n  }\n\n  @action async setConnectivityModel(data: any) {\n    /**\n     * we need to convert the double linked list from the API response to\n     * a slightly more complext object. This data format takes a line first apporach.\n     * Null nodes can be discarded and from <-> to relationships must be specifically\n     * defined\n     *\n     * Data format:\n     * [\n     *   {\n     *     from: {\n     *       coordinates: [-122.269029, 37.80787]\n     *     },\n     *     to: {\n     *       coordinates: [-122.271604, 37.803664]\n     *   },\n     * ]\n     *\n     */\n    // eslint-disable-next-line\n    let finalArray: any = [];\n    const filteredData = data.filter(\n      (x: any) =>\n        x.from_id != null && x.to_id != null && x.is_connected === true\n    );\n    // eslint-disable-next-line\n    filteredData.map((obj: any) => {\n      const derivedObjectFrom = {\n        from: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.from_id).longitude,\n            data.find((element: any) => element.id === obj.from_id).latitude,\n          ],\n        },\n        to: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.id).longitude,\n            data.find((element: any) => element.id === obj.id).latitude,\n          ],\n        },\n      };\n      const derivedObjectTo = {\n        from: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.id).longitude,\n            data.find((element: any) => element.id === obj.id).latitude,\n          ],\n        },\n        to: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.to_id).longitude,\n            data.find((element: any) => element.id === obj.to_id).latitude,\n          ],\n        },\n      };\n      finalArray.push(derivedObjectTo);\n      finalArray.push(derivedObjectFrom);\n    });\n    this.connectivityData = finalArray;\n  }\n\n  //   @action async fetchCoordinatesConnectivityMock() {\n  //     /**\n  //      * Data format: pathLayer\n  //      * [\n  //      *   {\n  //      *     path: [[-122.4, 37.7], [-122.5, 37.8], [-122.6, 37.85]],\n  //      *     name: 'Richmond - Millbrae',\n  //      *     color: [255, 0, 0]\n  //      *   },\n  //      *   ...\n  //      * ]\n  //      */\n  //     const connectivityLayers: any = [];\n  //     mockConnectivityDataSubNet6.map((convertedLayers: any) => {\n  //       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n  //         const x = [cV.x, cV.y];\n  //         return [...pV, x];\n  //       }, []);\n  //       connectivityLayers.push([lay]);\n  //     });\n  //     mockConnectivityDataSubNet7.map((convertedLayers: any) => {\n  //       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n  //         const x = [cV.x, cV.y];\n  //         return [...pV, x];\n  //       }, []);\n  //       connectivityLayers.push([lay]);\n  //     });\n  //     this.subNetConectivity = connectivityLayers || null;\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}