{"ast":null,"code":"var _jsxFileName = \"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/src/webGL/mapView.js\";\nimport React, { Component } from \"react\";\nimport DataView from \"./dataView\";\nimport { OBJLoader } from \"@loaders.gl/obj\";\nimport { registerLoaders } from \"@loaders.gl/core\";\nimport Materialize from \"materialize-css\";\nimport { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { PathLayer } from \"@deck.gl/layers\";\nimport { COORDINATE_SYSTEM, MapView } from \"@deck.gl/core\";\nimport { DirectionalLight, LightingEffect, PointLight, AmbientLight, _CameraLight as CameraLight } from \"@deck.gl/core\";\nimport { PathStyleExtension } from \"@deck.gl/extensions\";\nimport { DeckGL } from \"@deck.gl/react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { inject, observer } from \"mobx-react\";\nimport { toJS } from \"mobx\";\nimport ControlPanel from \"./control-panel\";\nimport RefreshButton from \"../Components/RefreshButton\";\nimport LayersButton from \"../Components/LayersButton\";\nimport StreetViewModeButton from \"../Components/StreetViewModeButton\";\nregisterLoaders([OBJLoader]);\nconst accessToken = \"pk.eyJ1IjoiamF5bG9ob2thcmUiLCJhIjoiY2tkcnI4OHU3MGZ6NDJ0bHFsOHRrcTljeiJ9.D9GoLNq2BgK16q5w3TjJ1g\";\nconst modelFilesURL = \"models/\";\n\nclass WebglView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      model: this.props.model,\n      mapStyle: \"\",\n      modelLayersList: [],\n      connectivityLayersList: [],\n      showConnectivity: false,\n      showModels: true,\n      time: 0\n    };\n\n    this.refreshAssets = async () => {\n      if (this.props.store.mapViewPort.zoom < 12) {\n        Materialize.toast({\n          html: \"Please zoom in more to load assets\",\n          displayLength: 2000,\n          classes: \"rounded\"\n        });\n      }\n\n      this.props.store.getModelList();\n      this.props.store.refeshConnectivityLayer();\n    };\n\n    this.toggleStreetView = async () => {\n      this.props.store.toggleStreetViewMode();\n    };\n\n    this._onStyleChange = mapStyle => this.setState({\n      mapStyle\n    });\n\n    this.layerCheck = (name, isChecked) => {\n      if (name === \"models\") {\n        this.setState({\n          showModels: isChecked\n        });\n      } else if (name === \"connectivity\") {\n        this.setState({\n          showConnectivity: isChecked\n        });\n      }\n    };\n  }\n\n  _renderEffects() {\n    let effectsToRender = [];\n    const ambientLight = new AmbientLight({\n      color: [255, 255, 255],\n      intensity: 1\n    });\n    effectsToRender.push(ambientLight);\n\n    if (this.props.store.assets.toString() != \"\" && this.props.store.assets != []) {\n      this.props.store.assets.map(model => {\n        try {\n          if (model) {\n            const light1 = new PointLight({\n              color: [255, 255, 255],\n              intensity: 2,\n              position: [model.geometry.X, model.geometry.Y, 400]\n            });\n            effectsToRender.push(light1);\n            const light2 = new PointLight({\n              color: [255, 255, 255],\n              intensity: 2,\n              position: [model.geometry.X - 20, model.geometry.Y - 20, 400]\n            });\n            effectsToRender.push(light2);\n            const light3 = new PointLight({\n              color: [255, 255, 255],\n              intensity: 2,\n              position: [model.geometry.X + 20, model.geometry.Y + 20, 400]\n            });\n            effectsToRender.push(light3);\n            const light4 = new PointLight({\n              color: [255, 255, 255],\n              intensity: 2,\n              position: [model.geometry.X + 20, model.geometry.Y - 20, 400]\n            });\n            effectsToRender.push(light4);\n            const light5 = new PointLight({\n              color: [255, 255, 255],\n              intensity: 2,\n              position: [model.geometry.X - 20, model.geometry.Y + 20, 400]\n            });\n            effectsToRender.push(5);\n          }\n        } catch {}\n      });\n    }\n\n    var effects = new LightingEffect(effectsToRender);\n    return [effects];\n  }\n\n  _renderLayers() {\n    let LayersList = [];\n    const meshLayerMat = {};\n    meshLayerMat.ambient = 1;\n    meshLayerMat.diffuse = 0.2;\n    meshLayerMat.shininess = 0;\n\n    if (this.props.store.assets.toString() != \"\" && this.props.store.assets != []) {\n      this.props.store.assets.map(model => {\n        if (model) {\n          //DO NOT DELETE THIS LOG STATEMENT\n          console.log(model.geometry.ModelName, model.Equipement, model.AssetId);\n\n          try {\n            let layer = new SimpleMeshLayer({\n              id: `models_${model.AssetId}`,\n              data: [{\n                position: [model.geometry.X, model.geometry.Y, model.geometry.Z],\n                zoom: 18,\n                orientation: [model.geometry.RotationX, model.geometry.RotationY, model.geometry.RotationZ],\n                model: model\n              }],\n              mesh: modelFilesURL + model.geometry.ModelName + \".obj\",\n              material: meshLayerMat,\n              sizeScale: model.geometry.Scale,\n              visible: this.state.showModels ? true : false,\n              coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n              getPosition: d => d.position,\n              getOrientation: d => d.orientation,\n              pickable: true,\n              onClick: event => {\n                this.props.store.setDataPanelModel(event.object.model);\n              }\n            });\n            LayersList.push(layer);\n          } catch {}\n        }\n      });\n    } // eslint-disable-next-line\n\n\n    toJS(this.props.store.subNetConectivity).map((x, i) => {\n      const staticPathLayerSubNet = new PathLayer({\n        id: `${i}-subnet-connectivity`,\n        data: x,\n        pickable: false,\n        visible: this.state.showConnectivity ? true : false,\n        widthMinPixels: 2,\n        opacity: 0.6,\n        getPath: d => d,\n        positionFormat: 'XYZ',\n        getColor: [253, 128, 93],\n        getWidth: d => 1\n      });\n      LayersList.push(staticPathLayerSubNet);\n    }); // eslint-disable-next-line\n\n    toJS(this.props.store.stagedConnectivityData).map((x, i) => {\n      const staticPathLayerSubNetStaged = new PathLayer({\n        id: `${i}-subnet-connectivity-staged`,\n        data: x,\n        pickable: false,\n        visible: this.state.showConnectivity ? true : false,\n        widthMinPixels: 2,\n        opacity: 0.76,\n        getPath: d => d,\n        positionFormat: 'XYZ',\n        getColor: [246, 0, 0],\n        getWidth: d => 1,\n        getDashArray: [2, 3],\n        dashJustified: true,\n        extensions: [new PathStyleExtension({\n          dash: true\n        })]\n      });\n      LayersList.push(staticPathLayerSubNetStaged);\n    });\n    return [LayersList];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      initialViewState: this.props.store.mapViewPort,\n      controller: true,\n      onViewStateChange: ({\n        viewState\n      }) => this.props.store.updateMapViewport(viewState),\n      effects: this._renderEffects(),\n      layers: this._renderLayers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MapView, {\n      id: \"mapView\",\n      controller: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(StaticMap, {\n      mapboxApiAccessToken: accessToken,\n      mapStyle: this.state.mapStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(ControlPanel, {\n      setMapStyle: this._onStyleChange,\n      additionalLayers: this.state.layersList,\n      toggleParent: this.layerCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(RefreshButton, {\n      refreshClick: this.refreshAssets,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(LayersButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(StreetViewModeButton, {\n      toggleStreetView: this.toggleStreetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DataView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default inject(\"store\")(observer(WebglView));","map":{"version":3,"sources":["/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/src/webGL/mapView.js"],"names":["React","Component","DataView","OBJLoader","registerLoaders","Materialize","SimpleMeshLayer","PathLayer","COORDINATE_SYSTEM","MapView","DirectionalLight","LightingEffect","PointLight","AmbientLight","_CameraLight","CameraLight","PathStyleExtension","DeckGL","StaticMap","inject","observer","toJS","ControlPanel","RefreshButton","LayersButton","StreetViewModeButton","accessToken","modelFilesURL","WebglView","state","model","props","mapStyle","modelLayersList","connectivityLayersList","showConnectivity","showModels","time","refreshAssets","store","mapViewPort","zoom","toast","html","displayLength","classes","getModelList","refeshConnectivityLayer","toggleStreetView","toggleStreetViewMode","_onStyleChange","setState","layerCheck","name","isChecked","_renderEffects","effectsToRender","ambientLight","color","intensity","push","assets","toString","map","light1","position","geometry","X","Y","light2","light3","light4","light5","effects","_renderLayers","LayersList","meshLayerMat","ambient","diffuse","shininess","console","log","ModelName","Equipement","AssetId","layer","id","data","Z","orientation","RotationX","RotationY","RotationZ","mesh","material","sizeScale","Scale","visible","coordinateSystem","LNGLAT","getPosition","d","getOrientation","pickable","onClick","event","setDataPanelModel","object","subNetConectivity","x","i","staticPathLayerSubNet","widthMinPixels","opacity","getPath","positionFormat","getColor","getWidth","stagedConnectivityData","staticPathLayerSubNetStaged","getDashArray","dashJustified","extensions","dash","render","viewState","updateMapViewport","layersList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport DataView from \"./dataView\";\r\nimport { OBJLoader } from \"@loaders.gl/obj\";\r\nimport { registerLoaders } from \"@loaders.gl/core\";\r\nimport Materialize from \"materialize-css\";\r\nimport { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\r\nimport { PathLayer } from \"@deck.gl/layers\";\r\nimport { COORDINATE_SYSTEM, MapView } from \"@deck.gl/core\";\r\nimport { DirectionalLight, LightingEffect, PointLight, AmbientLight, _CameraLight as CameraLight } from \"@deck.gl/core\";\r\nimport { PathStyleExtension } from \"@deck.gl/extensions\";\r\nimport { DeckGL } from \"@deck.gl/react\";\r\nimport { StaticMap } from \"react-map-gl\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { toJS } from \"mobx\";\r\nimport ControlPanel from \"./control-panel\";\r\nimport RefreshButton from \"../Components/RefreshButton\";\r\nimport LayersButton from \"../Components/LayersButton\";\r\nimport StreetViewModeButton from \"../Components/StreetViewModeButton\";\r\n\r\nregisterLoaders([OBJLoader]);\r\n\r\nconst accessToken =\r\n  \"pk.eyJ1IjoiamF5bG9ob2thcmUiLCJhIjoiY2tkcnI4OHU3MGZ6NDJ0bHFsOHRrcTljeiJ9.D9GoLNq2BgK16q5w3TjJ1g\";\r\n\r\nconst modelFilesURL = \"models/\"\r\n\r\n\r\nclass WebglView extends Component {\r\n  state = {\r\n      model: this.props.model,\r\n      mapStyle: \"\",\r\n      modelLayersList: [],\r\n      connectivityLayersList: [],\r\n      showConnectivity: false,\r\n      showModels: true,\r\n      time: 0,\r\n    };\r\n\r\n  refreshAssets = async () => {\r\n    if (this.props.store.mapViewPort.zoom < 12) {\r\n      Materialize.toast({\r\n        html: \"Please zoom in more to load assets\",\r\n        displayLength: 2000,\r\n        classes: \"rounded\",\r\n      });\r\n    }\r\n    \r\n      this.props.store.getModelList();\r\n      this.props.store.refeshConnectivityLayer();\r\n    \r\n  };\r\n\r\n  toggleStreetView = async () => {\r\n    this.props.store.toggleStreetViewMode();\r\n  };\r\n\r\n  _onStyleChange = (mapStyle) => this.setState({ mapStyle });\r\n\r\n  layerCheck = (name, isChecked) => {\r\n    if (name === \"models\") {\r\n      this.setState({\r\n        showModels: isChecked,\r\n      });\r\n    } else if (name === \"connectivity\") {\r\n      this.setState({\r\n        showConnectivity: isChecked,\r\n      });\r\n    }\r\n  };\r\n\r\n  _renderEffects() {\r\n\r\n    let effectsToRender = [];\r\n    \r\n    const ambientLight = new AmbientLight({\r\n      color: [255, 255, 255],\r\n      intensity: 1\r\n    });\r\n    effectsToRender.push(ambientLight);\r\n    \r\n    if(this.props.store.assets.toString() != \"\" &&  this.props.store.assets != []){\r\n      this.props.store.assets.map((model) => {\r\n        try{\r\n          if(model){\r\n            const light1 = new PointLight({\r\n              color: [255, 255, 255],\r\n              intensity: 2,\r\n              position: [model.geometry.X, model.geometry.Y, 400]\r\n            });\r\n            effectsToRender.push(light1);\r\n\r\n            const light2 = new PointLight({\r\n              color: [255, 255, 255],\r\n              intensity: 2,\r\n              position: [model.geometry.X-20, model.geometry.Y-20, 400]\r\n            });\r\n            effectsToRender.push(light2);\r\n\r\n            const light3 = new PointLight({\r\n              color: [255, 255, 255],\r\n              intensity: 2,\r\n              position: [model.geometry.X+20, model.geometry.Y+20, 400]\r\n            });\r\n            effectsToRender.push(light3);\r\n\r\n            const light4 = new PointLight({\r\n              color: [255, 255, 255],\r\n              intensity: 2,\r\n              position: [model.geometry.X+20, model.geometry.Y-20, 400]\r\n            });\r\n            effectsToRender.push(light4);\r\n\r\n            const light5 = new PointLight({\r\n              color: [255, 255, 255],\r\n              intensity: 2,\r\n              position: [model.geometry.X-20, model.geometry.Y+20, 400]\r\n            });\r\n            effectsToRender.push(5);\r\n\r\n          }\r\n        }\r\n        catch{}\r\n      });\r\n    }\r\n\r\n    var effects = new LightingEffect(effectsToRender)\r\n    return [effects];\r\n  }\r\n\r\n  _renderLayers() {\r\n    let LayersList = [];\r\n\r\n    const meshLayerMat = {};\r\n    meshLayerMat.ambient = 1;\r\n    meshLayerMat.diffuse = 0.2;\r\n    meshLayerMat.shininess = 0;\r\n\r\n    if(this.props.store.assets.toString() != \"\" &&  this.props.store.assets != []){\r\n      this.props.store.assets.map((model) => {\r\n        if(model){\r\n\r\n          //DO NOT DELETE THIS LOG STATEMENT\r\n          console.log(model.geometry.ModelName, model.Equipement, model.AssetId);\r\n\r\n          try {\r\n            let layer = new SimpleMeshLayer({\r\n              id: `models_${model.AssetId}`,\r\n              data: [\r\n                {\r\n                  position: [model.geometry.X, model.geometry.Y, model.geometry.Z],\r\n                  zoom: 18,\r\n                  orientation: [\r\n                    model.geometry.RotationX,\r\n                    model.geometry.RotationY,\r\n                    model.geometry.RotationZ,\r\n                  ],\r\n                  model: model,\r\n                },\r\n              ],\r\n              mesh: modelFilesURL + model.geometry.ModelName + \".obj\",\r\n              material: meshLayerMat,\r\n              sizeScale: model.geometry.Scale,\r\n              visible: this.state.showModels ? true : false,\r\n              coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\r\n              getPosition: (d) => d.position,\r\n              getOrientation: (d) => d.orientation,\r\n              pickable: true,\r\n              onClick: (event) => {\r\n                this.props.store.setDataPanelModel(event.object.model);\r\n              },\r\n            });\r\n\r\n            LayersList.push(layer);\r\n          } catch {}\r\n        }\r\n      });\r\n    }\r\n    // eslint-disable-next-line\r\n    toJS(this.props.store.subNetConectivity).map((x, i) => {\r\n      const staticPathLayerSubNet = new PathLayer({\r\n        id: `${i}-subnet-connectivity`,\r\n        data: x,\r\n        pickable: false,\r\n        visible: this.state.showConnectivity ? true : false,\r\n        widthMinPixels: 2,\r\n        opacity: 0.6,\r\n        getPath: (d) => d,\r\n        positionFormat: 'XYZ',\r\n        getColor: [253, 128, 93],\r\n        getWidth: (d) => 1,\r\n      });\r\n      LayersList.push(staticPathLayerSubNet);\r\n    });\r\n    \r\n    // eslint-disable-next-line\r\n    toJS(this.props.store.stagedConnectivityData).map((x, i) => {\r\n      const staticPathLayerSubNetStaged = new PathLayer({\r\n        id: `${i}-subnet-connectivity-staged`,\r\n        data: x,\r\n        pickable: false,\r\n        visible: this.state.showConnectivity ? true : false,\r\n        widthMinPixels: 2,\r\n        opacity: 0.76,\r\n        getPath: (d) => d,\r\n        positionFormat: 'XYZ',\r\n        getColor: [246, 0, 0],\r\n        getWidth: (d) => 1,\r\n        getDashArray: [2, 3],\r\n        dashJustified: true,\r\n        extensions: [new PathStyleExtension({ dash: true })],\r\n      });\r\n      LayersList.push(staticPathLayerSubNetStaged);\r\n    });\r\n\r\n    return [LayersList];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n      className=\"mapContainer\" >\r\n        <DeckGL\r\n          initialViewState={this.props.store.mapViewPort}\r\n          controller={true}\r\n          onViewStateChange={({ viewState }) =>\r\n            this.props.store.updateMapViewport(viewState)\r\n          }\r\n          effects={this._renderEffects()}\r\n          layers={this._renderLayers()}\r\n        >\r\n\r\n          <MapView \r\n            id=\"mapView\" \r\n            controller={true}>\r\n            <StaticMap\r\n              mapboxApiAccessToken={accessToken}\r\n              mapStyle={this.state.mapStyle}\r\n            />\r\n          </MapView>\r\n\r\n          <ControlPanel\r\n            setMapStyle={this._onStyleChange}\r\n            additionalLayers={this.state.layersList}\r\n            toggleParent={this.layerCheck}\r\n          />\r\n        </DeckGL>\r\n\r\n        <RefreshButton refreshClick={this.refreshAssets} />\r\n        <LayersButton />\r\n        <StreetViewModeButton toggleStreetView={this.toggleStreetView} />\r\n\r\n        <DataView />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject(\"store\")(observer(WebglView));\r\n"]},"metadata":{},"sourceType":"module"}