{"ast":null,"code":"import _initializerDefineProperty from \"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _temp;\n\nimport { observable, action, runInAction } from \"mobx\";\nimport { apiService } from \"./api_service.js\";\nimport { FlyToInterpolator, LinearInterpolator } from \"react-map-gl\";\nimport MAP_STYLE from \"../map-style-basic-v8.json\";\nimport WebMercatorViewport from \"viewport-mercator-project\";\nlet DataStore = (_class = (_temp = class DataStore {\n  constructor() {\n    _initializerDefineProperty(this, \"modelViewerState\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"useStaticAssets\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"useDynamicAssets\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"errorState\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"assets\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"assetsLoadingState\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"dataPanelContent\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"mapStyle\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"connectivityData\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"subNetConectivity\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"stagedConnectivityData\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"electricDevicesLayer\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"dateFilter\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"statusFilter\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"textFilter\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"viewportCoordinates\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"mapViewPort\", _descriptor17, this);\n  }\n\n  initiateMap() {\n    const newViewport = {\n      width: \"fit\",\n      height: \"100vh\",\n      latitude: 41.7833,\n      longitude: -88.1678,\n      zoom: 17.8,\n      pitch: 0,\n      bearing: 0\n    };\n    this.mapViewPort = newViewport;\n    this.getModelList();\n    this.getConnectivityLayer(this.viewportCoordinates); // DO NOT REMOVE\n  }\n\n  refreshFilters() {\n    this.dataPanelContent = \"Please select a model to view data\";\n    this.statusFilter = \"All\";\n    this.dateFilter = new Date().getFullYear() + \"-\" + (new Date().getMonth() + 1) + \"-\" + (new Date().getDate() + 1);\n    this.textFilter = \"\";\n  }\n\n  toggleStreetViewMode() {\n    if (this.mapViewPort.pitch === 0) {\n      const newViewport = {\n        width: \"fit\",\n        height: \"100vh\",\n        longitude: this.mapViewPort.longitude,\n        latitude: this.mapViewPort.latitude,\n        zoom: this.mapViewPort.zoom,\n        transitionInterpolator: new LinearInterpolator([\"pitch\"]),\n        transitionDuration: 1000,\n        pitch: 60,\n        bearing: this.mapViewPort.bearing\n      };\n      this.mapViewPort = newViewport;\n    } else {\n      const newViewport = {\n        width: \"fit\",\n        height: \"100vh\",\n        longitude: this.mapViewPort.longitude,\n        latitude: this.mapViewPort.latitude,\n        zoom: this.mapViewPort.zoom,\n        transitionInterpolator: new LinearInterpolator([\"pitch\"]),\n        transitionDuration: 1000,\n        pitch: 0,\n        bearing: this.mapViewPort.bearing\n      };\n      this.mapViewPort = newViewport;\n    }\n  }\n\n  setDataPanelModel(model) {\n    this.dataPanelContent = model;\n  }\n\n  updateSearchDate(newDate) {\n    this.dateFilter = newDate.getFullYear() + \"-\" + (newDate.getMonth() + 1) + \"-\" + newDate.getDate();\n  }\n\n  updateSearchStatus(newStatus) {\n    this.statusFilter = newStatus;\n  }\n\n  updateSearchText(newText) {\n    this.textFilter = newText;\n  } //Change Map view port\n\n\n  updateMapViewport(newViewport) {\n    this.mapViewPort = newViewport;\n    var viewport = new WebMercatorViewport(newViewport);\n    const vwportState = [];\n    vwportState.push(viewport.unproject([0, viewport.height]), viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]));\n    this.viewportCoordinates = vwportState;\n  } //Get list of models\n\n\n  async getModelList() {\n    let newAssets = [];\n    this.assets = [];\n    this.assetsLoadingState = true;\n\n    try {\n      if (this.useDynamicAssets) {\n        const dynamicAssets = await apiService.getAssetsListAsync(this.viewportCoordinates, this.statusFilter, this.textFilter, this.dateFilter);\n\n        if (dynamicAssets != null && dynamicAssets != []) {\n          newAssets = newAssets.concat(dynamicAssets);\n        }\n      }\n\n      if (this.useStaticAssets) {\n        const staticAssets = await apiService.getAssetsListAsyncStatic();\n        newAssets = newAssets.concat(staticAssets);\n      }\n\n      this.assets = newAssets.filter(function (el) {\n        return 'geometry' in el;\n      });\n      this.assetsLoadingState = false;\n    } catch {\n      this.assetsLoadingState = false;\n      this.errorState = true;\n    }\n\n    this.refreshFilters();\n  }\n\n  async refeshConnectivityLayer() {\n    this.getConnectivityLayer(this.viewportCoordinates);\n  } //Get list of connectivity layers\n\n\n  async getConnectivityLayer(viewData) {\n    const response = await apiService.getConnectivtyDataAsync(viewData);\n    const stagedData = await apiService.getStagedConnectivtyDataAsync();\n    runInAction(() => {\n      this.formatConnectivityData(response);\n      this.formatStagedConnectivityData(stagedData);\n    });\n  }\n\n  async formatConnectivityData(data) {\n    const subnetLines = [];\n    const electricDevices = []; // eslint-disable-next-line\n\n    Object.entries(data).map(x => {\n      switch (x[0]) {\n        case \"100\":\n          //electric devices\n          // eslint-disable-next-line\n          x[1].features.map(eleDevices => {\n            const lay = [eleDevices.geometry[\"x\"], eleDevices.geometry[\"y\"]];\n            electricDevices.push([lay]);\n          });\n          this.electricDevicesLayer = electricDevices || null;\n          break;\n\n        case \"105\":\n          //electric assemblies\n          break;\n\n        case \"110\":\n          //electric junction\n          break;\n\n        case \"115\":\n          //electric lines\n          break;\n\n        case \"903\": // electric sublines\n\n        case \"120\":\n          // eslint-disable-next-line\n          x[1].features.map(subnet => {\n            // eslint-disable-next-line\n            subnet.geometry.paths.map(individualPath => {\n              const lay = individualPath.reduce((pV, cV) => {\n                return [...pV, [cV[0], cV[1], 8.6]];\n              }, []);\n              subnetLines.push([lay]);\n            });\n          });\n          this.subNetConectivity = subnetLines || null;\n          break;\n\n        case \"900\":\n          // structure junction\n          break;\n\n        case \"905\":\n          // structure line\n          break;\n\n        case \"910\":\n          // structure boundary\n          break;\n      }\n    });\n  }\n\n  async formatStagedConnectivityData(data) {\n    const subnetStagedLines = []; // eslint-disable-next-line\n\n    Object.entries(data).map(x => {\n      switch (x[0]) {\n        case \"0\":\n          // points\n          break;\n\n        case \"1\":\n          //lines\n          // eslint-disable-next-line\n          x[1].features.map(subnet => {\n            // eslint-disable-next-line\n            subnet.geometry.paths.map(individualPath => {\n              const lay = individualPath.reduce((pV, cV) => {\n                return [...pV, [cV[0], cV[1], 8.6]];\n              }, []);\n              subnetStagedLines.push([lay]);\n            });\n          });\n          this.stagedConnectivityData = subnetStagedLines || null;\n          break;\n\n        case \"2\":\n          //electric junction\n          break;\n      }\n    });\n  } //Model selected in menu\n  //Updates viewport and renders models near selected model\n\n\n  async setSelectedModel(model) {\n    const newViewport = {\n      width: \"fit\",\n      height: \"100vh\",\n      longitude: model.geometry.X,\n      latitude: model.geometry.Y,\n      zoom: 18,\n      transitionInterpolator: new FlyToInterpolator({\n        speed: 3\n      }),\n      transitionDuration: \"auto\",\n      pitch: 0,\n      bearing: 0\n    };\n    this.mapViewPort = newViewport;\n    this.setDataPanelModel(model);\n  }\n\n  async setMapStyle(map) {\n    this.mapStyle = map;\n  }\n\n  async setConnectivityModel(data) {\n    /**\n     * we need to convert the double linked list from the API response to\n     * a slightly more complext object. This data format takes a line first apporach.\n     * Null nodes can be discarded and from <-> to relationships must be specifically\n     * defined\n     *\n     * Data format:\n     * [\n     *   {\n     *     from: {\n     *       coordinates: [-122.269029, 37.80787]\n     *     },\n     *     to: {\n     *       coordinates: [-122.271604, 37.803664]\n     *   },\n     * ]\n     *\n     */\n    // eslint-disable-next-line\n    let finalArray = [];\n    const filteredData = data.filter(x => x.from_id != null && x.to_id != null && x.is_connected === true); // eslint-disable-next-line\n\n    filteredData.map(obj => {\n      const derivedObjectFrom = {\n        from: {\n          coordinates: [data.find(element => element.id === obj.from_id).longitude, data.find(element => element.id === obj.from_id).latitude]\n        },\n        to: {\n          coordinates: [data.find(element => element.id === obj.id).longitude, data.find(element => element.id === obj.id).latitude]\n        }\n      };\n      const derivedObjectTo = {\n        from: {\n          coordinates: [data.find(element => element.id === obj.id).longitude, data.find(element => element.id === obj.id).latitude]\n        },\n        to: {\n          coordinates: [data.find(element => element.id === obj.to_id).longitude, data.find(element => element.id === obj.to_id).latitude]\n        }\n      };\n      finalArray.push(derivedObjectTo);\n      finalArray.push(derivedObjectFrom);\n    });\n    this.connectivityData = finalArray;\n  } //   @action async fetchCoordinatesConnectivityMock() {\n  //     /**\n  //      * Data format: pathLayer\n  //      * [\n  //      *   {\n  //      *     path: [[-122.4, 37.7], [-122.5, 37.8], [-122.6, 37.85]],\n  //      *     name: 'Richmond - Millbrae',\n  //      *     color: [255, 0, 0]\n  //      *   },\n  //      *   ...\n  //      * ]\n  //      */\n  //     const connectivityLayers: any = [];\n  //     mockConnectivityDataSubNet6.map((convertedLayers: any) => {\n  //       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n  //         const x = [cV.x, cV.y];\n  //         return [...pV, x];\n  //       }, []);\n  //       connectivityLayers.push([lay]);\n  //     });\n  //     mockConnectivityDataSubNet7.map((convertedLayers: any) => {\n  //       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n  //         const x = [cV.x, cV.y];\n  //         return [...pV, x];\n  //       }, []);\n  //       connectivityLayers.push([lay]);\n  //     });\n  //     this.subNetConectivity = connectivityLayers || null;\n  // }\n\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"modelViewerState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"useStaticAssets\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"useDynamicAssets\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"errorState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"assets\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"assetsLoadingState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"dataPanelContent\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"Please select a model to view data\";\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"mapStyle\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return MAP_STYLE;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"connectivityData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"subNetConectivity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"stagedConnectivityData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"electricDevicesLayer\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"dateFilter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Date().getFullYear() + \"-\" + (new Date().getMonth() + 1) + \"-\" + (new Date().getDate() + 1);\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"statusFilter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"All\";\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"textFilter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"viewportCoordinates\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [[-88.17231208338957, 41.78164438640926], [-88.17231208338957, 41.784532458674306], [-88.16407233729582, 41.784532458674306], [-88.16407233729582, 41.78164438640926]];\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"mapViewPort\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      width: \"fit\",\n      height: \"100vh\",\n      latitude: 0,\n      longitude: 0,\n      zoom: 2,\n      pitch: 0,\n      bearing: 0\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"initiateMap\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"initiateMap\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"refreshFilters\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"refreshFilters\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"toggleStreetViewMode\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleStreetViewMode\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setDataPanelModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setDataPanelModel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateSearchDate\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateSearchDate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateSearchStatus\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateSearchStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateSearchText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateSearchText\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateMapViewport\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateMapViewport\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getModelList\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getModelList\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"refeshConnectivityLayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"refeshConnectivityLayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getConnectivityLayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getConnectivityLayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"formatConnectivityData\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"formatConnectivityData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"formatStagedConnectivityData\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"formatStagedConnectivityData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSelectedModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSelectedModel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setMapStyle\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setMapStyle\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setConnectivityModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setConnectivityModel\"), _class.prototype)), _class);\nexport { DataStore as default };","map":{"version":3,"sources":["/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/src/state-management/store.tsx"],"names":["observable","action","runInAction","apiService","FlyToInterpolator","LinearInterpolator","MAP_STYLE","WebMercatorViewport","DataStore","initiateMap","newViewport","width","height","latitude","longitude","zoom","pitch","bearing","mapViewPort","getModelList","getConnectivityLayer","viewportCoordinates","refreshFilters","dataPanelContent","statusFilter","dateFilter","Date","getFullYear","getMonth","getDate","textFilter","toggleStreetViewMode","transitionInterpolator","transitionDuration","setDataPanelModel","model","updateSearchDate","newDate","updateSearchStatus","newStatus","updateSearchText","newText","updateMapViewport","viewport","vwportState","push","unproject","newAssets","assets","assetsLoadingState","useDynamicAssets","dynamicAssets","getAssetsListAsync","concat","useStaticAssets","staticAssets","getAssetsListAsyncStatic","filter","el","errorState","refeshConnectivityLayer","viewData","response","getConnectivtyDataAsync","stagedData","getStagedConnectivtyDataAsync","formatConnectivityData","formatStagedConnectivityData","data","subnetLines","electricDevices","Object","entries","map","x","features","eleDevices","lay","geometry","electricDevicesLayer","subnet","paths","individualPath","reduce","pV","cV","subNetConectivity","subnetStagedLines","stagedConnectivityData","setSelectedModel","X","Y","speed","setMapStyle","mapStyle","setConnectivityModel","finalArray","filteredData","from_id","to_id","is_connected","obj","derivedObjectFrom","from","coordinates","find","element","id","to","derivedObjectTo","connectivityData"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,MAAhD;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,cAAtD;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;IAEqBC,S,sBAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AA+CrBC,EAAAA,WAAR,GAAqB;AACnB,UAAMC,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAE,KADW;AAElBC,MAAAA,MAAM,EAAE,OAFU;AAGlBC,MAAAA,QAAQ,EAAE,OAHQ;AAIlBC,MAAAA,SAAS,EAAE,CAAC,OAJM;AAKlBC,MAAAA,IAAI,EAAE,IALY;AAMlBC,MAAAA,KAAK,EAAE,CANW;AAOlBC,MAAAA,OAAO,EAAE;AAPS,KAApB;AASA,SAAKC,WAAL,GAAmBR,WAAnB;AACA,SAAKS,YAAL;AACA,SAAKC,oBAAL,CAA0B,KAAKC,mBAA/B,EAZmB,CAYkC;AACtD;;AAEOC,EAAAA,cAAR,GAAwB;AACtB,SAAKC,gBAAL,GAAwB,oCAAxB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,UAAL,GACA,IAAIC,IAAJ,GAAWC,WAAX,KACA,GADA,IAEC,IAAID,IAAJ,GAAWE,QAAX,KAAwB,CAFzB,IAGA,GAHA,IAIC,IAAIF,IAAJ,GAAWG,OAAX,KAAuB,CAJxB,CADA;AAMA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAEOC,EAAAA,oBAAR,GAA+B;AAC7B,QAAI,KAAKb,WAAL,CAAiBF,KAAjB,KAA2B,CAA/B,EAAkC;AAChC,YAAMN,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE,KADW;AAElBC,QAAAA,MAAM,EAAE,OAFU;AAGlBE,QAAAA,SAAS,EAAE,KAAKI,WAAL,CAAiBJ,SAHV;AAIlBD,QAAAA,QAAQ,EAAE,KAAKK,WAAL,CAAiBL,QAJT;AAKlBE,QAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBH,IALL;AAMlBiB,QAAAA,sBAAsB,EAAE,IAAI3B,kBAAJ,CAAuB,CAAC,OAAD,CAAvB,CANN;AAOlB4B,QAAAA,kBAAkB,EAAE,IAPF;AAQlBjB,QAAAA,KAAK,EAAE,EARW;AASlBC,QAAAA,OAAO,EAAE,KAAKC,WAAL,CAAiBD;AATR,OAApB;AAWA,WAAKC,WAAL,GAAmBR,WAAnB;AACD,KAbD,MAaO;AACL,YAAMA,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE,KADW;AAElBC,QAAAA,MAAM,EAAE,OAFU;AAGlBE,QAAAA,SAAS,EAAE,KAAKI,WAAL,CAAiBJ,SAHV;AAIlBD,QAAAA,QAAQ,EAAE,KAAKK,WAAL,CAAiBL,QAJT;AAKlBE,QAAAA,IAAI,EAAE,KAAKG,WAAL,CAAiBH,IALL;AAMlBiB,QAAAA,sBAAsB,EAAE,IAAI3B,kBAAJ,CAAuB,CAAC,OAAD,CAAvB,CANN;AAOlB4B,QAAAA,kBAAkB,EAAE,IAPF;AAQlBjB,QAAAA,KAAK,EAAE,CARW;AASlBC,QAAAA,OAAO,EAAE,KAAKC,WAAL,CAAiBD;AATR,OAApB;AAWA,WAAKC,WAAL,GAAmBR,WAAnB;AACD;AACF;;AAEOwB,EAAAA,iBAAR,CAA0BC,KAA1B,EAAsC;AACpC,SAAKZ,gBAAL,GAAwBY,KAAxB;AACD;;AAEOC,EAAAA,gBAAR,CAAyBC,OAAzB,EAAuC;AACrC,SAAKZ,UAAL,GACEY,OAAO,CAACV,WAAR,KACA,GADA,IAECU,OAAO,CAACT,QAAR,KAAqB,CAFtB,IAGA,GAHA,GAIAS,OAAO,CAACR,OAAR,EALF;AAMD;;AAEOS,EAAAA,kBAAR,CAA2BC,SAA3B,EAA2C;AACzC,SAAKf,YAAL,GAAoBe,SAApB;AACD;;AAEOC,EAAAA,gBAAR,CAAyBC,OAAzB,EAAuC;AACrC,SAAKX,UAAL,GAAkBW,OAAlB;AACD,GA3H4B,CA6H7B;;;AACQC,EAAAA,iBAAR,CAA0BhC,WAA1B,EAA4C;AAC1C,SAAKQ,WAAL,GAAmBR,WAAnB;AACA,QAAIiC,QAAQ,GAAG,IAAIpC,mBAAJ,CAAwBG,WAAxB,CAAf;AACA,UAAMkC,WAAW,GAAG,EAApB;AACAA,IAAAA,WAAW,CAACC,IAAZ,CACEF,QAAQ,CAACG,SAAT,CAAmB,CAAC,CAAD,EAAIH,QAAQ,CAAC/B,MAAb,CAAnB,CADF,EAEE+B,QAAQ,CAACG,SAAT,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAFF,EAGEH,QAAQ,CAACG,SAAT,CAAmB,CAACH,QAAQ,CAAChC,KAAV,EAAiB,CAAjB,CAAnB,CAHF,EAIEgC,QAAQ,CAACG,SAAT,CAAmB,CAACH,QAAQ,CAAChC,KAAV,EAAiBgC,QAAQ,CAAC/B,MAA1B,CAAnB,CAJF;AAMA,SAAKS,mBAAL,GAA2BuB,WAA3B;AACD,GAzI4B,CA2I7B;;;AACA,QAAczB,YAAd,GAA6B;AAC3B,QAAI4B,SAAgB,GAAG,EAAvB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,kBAAL,GAA0B,IAA1B;;AAEA,QAAI;AACF,UAAI,KAAKC,gBAAT,EAA2B;AACzB,cAAMC,aAAa,GAAG,MAAMhD,UAAU,CAACiD,kBAAX,CAC1B,KAAK/B,mBADqB,EAE1B,KAAKG,YAFqB,EAG1B,KAAKM,UAHqB,EAI1B,KAAKL,UAJqB,CAA5B;;AAMA,YAAI0B,aAAa,IAAI,IAAjB,IAAyBA,aAAa,IAAI,EAA9C,EAAiD;AAC/CJ,UAAAA,SAAS,GAAGA,SAAS,CAACM,MAAV,CAAiBF,aAAjB,CAAZ;AACD;AACF;;AAED,UAAI,KAAKG,eAAT,EAA0B;AACxB,cAAMC,YAAY,GAAG,MAAMpD,UAAU,CAACqD,wBAAX,EAA3B;AACAT,QAAAA,SAAS,GAAGA,SAAS,CAACM,MAAV,CAAiBE,YAAjB,CAAZ;AACD;;AAED,WAAKP,MAAL,GAAcD,SAAS,CAACU,MAAV,CAAiB,UAAUC,EAAV,EAAoB;AACjD,eAAO,cAAcA,EAArB;AACD,OAFa,CAAd;AAIA,WAAKT,kBAAL,GAA0B,KAA1B;AACD,KAvBD,CAuBE,MAAM;AACN,WAAKA,kBAAL,GAA0B,KAA1B;AACA,WAAKU,UAAL,GAAkB,IAAlB;AACD;;AACD,SAAKrC,cAAL;AACD;;AAED,QAAcsC,uBAAd,GAAwC;AACtC,SAAKxC,oBAAL,CAA0B,KAAKC,mBAA/B;AACD,GAjL4B,CAmL7B;;;AACA,QAAcD,oBAAd,CAAmCyC,QAAnC,EAAmE;AACjE,UAAMC,QAAgB,GAAG,MAAM3D,UAAU,CAAC4D,uBAAX,CAAmCF,QAAnC,CAA/B;AACA,UAAMG,UAAkB,GAAG,MAAM7D,UAAU,CAAC8D,6BAAX,EAAjC;AACA/D,IAAAA,WAAW,CAAC,MAAM;AAChB,WAAKgE,sBAAL,CAA4BJ,QAA5B;AACA,WAAKK,4BAAL,CAAkCH,UAAlC;AACD,KAHU,CAAX;AAID;;AAED,QAAcE,sBAAd,CAAqCE,IAArC,EAAmD;AACjD,UAAMC,WAAgB,GAAG,EAAzB;AACA,UAAMC,eAAoB,GAAG,EAA7B,CAFiD,CAGjD;;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAeJ,IAAf,EAAqBK,GAArB,CAA0BC,CAAD,IAAY;AACnC,cAAQA,CAAC,CAAC,CAAD,CAAT;AACE,aAAK,KAAL;AAAY;AACZ;AACEA,UAAAA,CAAC,CAAC,CAAD,CAAD,CAAKC,QAAL,CAAcF,GAAd,CAAmBG,UAAD,IAAqB;AACrC,kBAAMC,GAAG,GAAG,CAACD,UAAU,CAACE,QAAX,CAAoB,GAApB,CAAD,EAA2BF,UAAU,CAACE,QAAX,CAAoB,GAApB,CAA3B,CAAZ;AACAR,YAAAA,eAAe,CAACzB,IAAhB,CAAqB,CAACgC,GAAD,CAArB;AACD,WAHD;AAIA,eAAKE,oBAAL,GAA4BT,eAAe,IAAI,IAA/C;AACA;;AACF,aAAK,KAAL;AAAY;AACV;;AACF,aAAK,KAAL;AAAY;AACV;;AACF,aAAK,KAAL;AAAY;AACV;;AACF,aAAK,KAAL,CAfF,CAec;;AACZ,aAAK,KAAL;AACE;AACAI,UAAAA,CAAC,CAAC,CAAD,CAAD,CAAKC,QAAL,CAAcF,GAAd,CAAmBO,MAAD,IAAiB;AACjC;AACAA,YAAAA,MAAM,CAACF,QAAP,CAAgBG,KAAhB,CAAsBR,GAAtB,CAA2BS,cAAD,IAAyB;AACjD,oBAAML,GAAG,GAAGK,cAAc,CAACC,MAAf,CAAsB,CAACC,EAAD,EAAUC,EAAV,KAAsB;AACtD,uBAAO,CAAC,GAAGD,EAAJ,EAAQ,CAACC,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAe,GAAf,CAAR,CAAP;AACD,eAFW,EAET,EAFS,CAAZ;AAGAhB,cAAAA,WAAW,CAACxB,IAAZ,CAAiB,CAACgC,GAAD,CAAjB;AACD,aALD;AAMD,WARD;AASA,eAAKS,iBAAL,GAAyBjB,WAAW,IAAI,IAAxC;AACA;;AACF,aAAK,KAAL;AAAY;AACV;;AACF,aAAK,KAAL;AAAY;AACV;;AACF,aAAK,KAAL;AAAY;AACV;AAlCJ;AAoCD,KArCD;AAsCD;;AAED,QAAcF,4BAAd,CAA2CC,IAA3C,EAAyD;AACvD,UAAMmB,iBAAsB,GAAG,EAA/B,CADuD,CAEvD;;AACAhB,IAAAA,MAAM,CAACC,OAAP,CAAeJ,IAAf,EAAqBK,GAArB,CAA0BC,CAAD,IAAY;AACnC,cAAQA,CAAC,CAAC,CAAD,CAAT;AACE,aAAK,GAAL;AAAU;AACR;;AACF,aAAK,GAAL;AAAU;AACV;AACEA,UAAAA,CAAC,CAAC,CAAD,CAAD,CAAKC,QAAL,CAAcF,GAAd,CAAmBO,MAAD,IAAiB;AACjC;AACAA,YAAAA,MAAM,CAACF,QAAP,CAAgBG,KAAhB,CAAsBR,GAAtB,CAA2BS,cAAD,IAAyB;AACjD,oBAAML,GAAG,GAAGK,cAAc,CAACC,MAAf,CAAsB,CAACC,EAAD,EAAUC,EAAV,KAAsB;AACtD,uBAAO,CAAC,GAAGD,EAAJ,EAAQ,CAACC,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAe,GAAf,CAAR,CAAP;AACD,eAFW,EAET,EAFS,CAAZ;AAGAE,cAAAA,iBAAiB,CAAC1C,IAAlB,CAAuB,CAACgC,GAAD,CAAvB;AACD,aALD;AAMD,WARD;AASA,eAAKW,sBAAL,GAA8BD,iBAAiB,IAAI,IAAnD;AACA;;AACF,aAAK,GAAL;AAAU;AACR;AAjBJ;AAmBD,KApBD;AAqBD,GAjQ4B,CAmQ7B;AACA;;;AACA,QAAcE,gBAAd,CAA+BtD,KAA/B,EAA2C;AACzC,UAAMzB,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAE,KADW;AAElBC,MAAAA,MAAM,EAAE,OAFU;AAGlBE,MAAAA,SAAS,EAAEqB,KAAK,CAAC2C,QAAN,CAAeY,CAHR;AAIlB7E,MAAAA,QAAQ,EAAEsB,KAAK,CAAC2C,QAAN,CAAea,CAJP;AAKlB5E,MAAAA,IAAI,EAAE,EALY;AAMlBiB,MAAAA,sBAAsB,EAAE,IAAI5B,iBAAJ,CAAsB;AAAEwF,QAAAA,KAAK,EAAE;AAAT,OAAtB,CANN;AAOlB3D,MAAAA,kBAAkB,EAAE,MAPF;AAQlBjB,MAAAA,KAAK,EAAE,CARW;AASlBC,MAAAA,OAAO,EAAE;AATS,KAApB;AAWA,SAAKC,WAAL,GAAmBR,WAAnB;AACA,SAAKwB,iBAAL,CAAuBC,KAAvB;AACD;;AAED,QAAc0D,WAAd,CAA0BpB,GAA1B,EAAoC;AAClC,SAAKqB,QAAL,GAAgBrB,GAAhB;AACD;;AAED,QAAcsB,oBAAd,CAAmC3B,IAAnC,EAA8C;AAC5C;;;;;;;;;;;;;;;;;;AAkBA;AACA,QAAI4B,UAAe,GAAG,EAAtB;AACA,UAAMC,YAAY,GAAG7B,IAAI,CAACX,MAAL,CAClBiB,CAAD,IACEA,CAAC,CAACwB,OAAF,IAAa,IAAb,IAAqBxB,CAAC,CAACyB,KAAF,IAAW,IAAhC,IAAwCzB,CAAC,CAAC0B,YAAF,KAAmB,IAF1C,CAArB,CArB4C,CAyB5C;;AACAH,IAAAA,YAAY,CAACxB,GAAb,CAAkB4B,GAAD,IAAc;AAC7B,YAAMC,iBAAiB,GAAG;AACxBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,WAAW,EAAE,CACXpC,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACH,OAA/C,EAAwDpF,SAD7C,EAEXsD,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACH,OAA/C,EAAwDrF,QAF7C;AADT,SADkB;AAOxB+F,QAAAA,EAAE,EAAE;AACFJ,UAAAA,WAAW,EAAE,CACXpC,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACM,EAA/C,EAAmD7F,SADxC,EAEXsD,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACM,EAA/C,EAAmD9F,QAFxC;AADX;AAPoB,OAA1B;AAcA,YAAMgG,eAAe,GAAG;AACtBN,QAAAA,IAAI,EAAE;AACJC,UAAAA,WAAW,EAAE,CACXpC,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACM,EAA/C,EAAmD7F,SADxC,EAEXsD,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACM,EAA/C,EAAmD9F,QAFxC;AADT,SADgB;AAOtB+F,QAAAA,EAAE,EAAE;AACFJ,UAAAA,WAAW,EAAE,CACXpC,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACF,KAA/C,EAAsDrF,SAD3C,EAEXsD,IAAI,CAACqC,IAAL,CAAWC,OAAD,IAAkBA,OAAO,CAACC,EAAR,KAAeN,GAAG,CAACF,KAA/C,EAAsDtF,QAF3C;AADX;AAPkB,OAAxB;AAcAmF,MAAAA,UAAU,CAACnD,IAAX,CAAgBgE,eAAhB;AACAb,MAAAA,UAAU,CAACnD,IAAX,CAAgByD,iBAAhB;AACD,KA/BD;AAgCA,SAAKQ,gBAAL,GAAwBd,UAAxB;AACD,GApV4B,CAsV7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlX6B,C,0FAC5BhG,U;;;;;WAA8B,I;;mFAE9BA,U;;;;;WAA6B,I;;oFAG7BA,U;;;;;WAA8B,K;;8EAE9BA,U;;;;;WAAwB,K;;0EAExBA,U;;;;;WAAyB,E;;sFACzBA,U;;;;;WAAgC,I;;oFAEhCA,U;;;;;WAA8B,oC;;4EAE9BA,U;;;;;WAAsBM,S;;oFACtBN,U;;;;;WAA8B,I;;sFAE9BA,U;;;;;WAAoC,E;;2FACpCA,U;;;;;WAAyC,E;;yFACzCA,U;;;;;WAAuC,E;;+EACvCA,U;;;;;WACC,IAAI0B,IAAJ,GAAWC,WAAX,KACA,GADA,IAEC,IAAID,IAAJ,GAAWE,QAAX,KAAwB,CAFzB,IAGA,GAHA,IAIC,IAAIF,IAAJ,GAAWG,OAAX,KAAuB,CAJxB,C;;iFAMD7B,U;;;;;WAA0B,K;;+EAC1BA,U;;;;;WAAwB,E;;wFACxBA,U;;;;;WAAiC,CAChC,CAAC,CAAC,iBAAF,EAAoB,iBAApB,CADgC,EAEhC,CAAC,CAAC,iBAAF,EAAoB,kBAApB,CAFgC,EAGhC,CAAC,CAAC,iBAAF,EAAoB,kBAApB,CAHgC,EAIhC,CAAC,CAAC,iBAAF,EAAoB,iBAApB,CAJgC,C;;gFAOjCA,U;;;;;WAAyB;AACxBW,MAAAA,KAAK,EAAE,KADiB;AAExBC,MAAAA,MAAM,EAAE,OAFgB;AAGxBC,MAAAA,QAAQ,EAAE,CAHc;AAIxBC,MAAAA,SAAS,EAAE,CAJa;AAKxBC,MAAAA,IAAI,EAAE,CALkB;AAMxBC,MAAAA,KAAK,EAAE,CANiB;AAOxBC,MAAAA,OAAO,EAAE;AAPe,K;;gEAUzBhB,M,uJAeAA,M,gKAYAA,M,mKA8BAA,M,+JAIAA,M,gKASAA,M,gKAIAA,M,+JAKAA,M,2JAcAA,M,iKAmCAA,M,yKAKAA,M,wKASAA,M,gLA4CAA,M,0KA4BAA,M,yJAgBAA,M,6JAIAA,M;SAzRkBO,S","sourcesContent":["import { observable, action, runInAction } from \"mobx\";\n\nimport { apiService } from \"./api_service.js\";\nimport { FlyToInterpolator, LinearInterpolator } from \"react-map-gl\";\nimport MAP_STYLE from \"../map-style-basic-v8.json\";\nimport WebMercatorViewport from \"viewport-mercator-project\";\n\nexport default class DataStore {\n  @observable modelViewerState = true;\n  \n  @observable useStaticAssets = true;\n\n  //Set Boolen to true when changing to API calls\n  @observable useDynamicAssets = false;\n\n  @observable errorState = false;\n\n  @observable assets: any = [];\n  @observable assetsLoadingState = true;\n\n  @observable dataPanelContent = \"Please select a model to view data\";\n\n  @observable mapStyle = MAP_STYLE;\n  @observable connectivityData = null;\n\n  @observable subNetConectivity: any = [];\n  @observable stagedConnectivityData: any = [];\n  @observable electricDevicesLayer: any = [];\n  @observable dateFilter =\n    new Date().getFullYear() +\n    \"-\" +\n    (new Date().getMonth() + 1) +\n    \"-\" +\n    (new Date().getDate() + 1);\n\n  @observable statusFilter = \"All\";\n  @observable textFilter = \"\";\n  @observable viewportCoordinates = [\n    [-88.17231208338957,41.78164438640926],\n    [-88.17231208338957,41.784532458674306],\n    [-88.16407233729582,41.784532458674306],\n    [-88.16407233729582,41.78164438640926]\n  ];\n\n  @observable mapViewPort = {\n    width: \"fit\",\n    height: \"100vh\",\n    latitude: 0,\n    longitude: 0,\n    zoom: 2,\n    pitch: 0,\n    bearing: 0,\n  };\n\n  @action initiateMap(){\n    const newViewport = {\n      width: \"fit\",\n      height: \"100vh\",\n      latitude: 41.7833,\n      longitude: -88.1678,\n      zoom: 17.8,\n      pitch: 0,\n      bearing: 0,\n    };\n    this.mapViewPort = newViewport;\n    this.getModelList();\n    this.getConnectivityLayer(this.viewportCoordinates); // DO NOT REMOVE\n  }\n\n  @action refreshFilters(){\n    this.dataPanelContent = \"Please select a model to view data\";\n    this.statusFilter = \"All\";\n    this.dateFilter = \n    new Date().getFullYear() +\n    \"-\" +\n    (new Date().getMonth() + 1) +\n    \"-\" +\n    (new Date().getDate() + 1);\n    this.textFilter = \"\";\n  }\n\n  @action toggleStreetViewMode() {\n    if (this.mapViewPort.pitch === 0) {\n      const newViewport = {\n        width: \"fit\",\n        height: \"100vh\",\n        longitude: this.mapViewPort.longitude,\n        latitude: this.mapViewPort.latitude,\n        zoom: this.mapViewPort.zoom,\n        transitionInterpolator: new LinearInterpolator([\"pitch\"]),\n        transitionDuration: 1000,\n        pitch: 60,\n        bearing: this.mapViewPort.bearing,\n      };\n      this.mapViewPort = newViewport;\n    } else {\n      const newViewport = {\n        width: \"fit\",\n        height: \"100vh\",\n        longitude: this.mapViewPort.longitude,\n        latitude: this.mapViewPort.latitude,\n        zoom: this.mapViewPort.zoom,\n        transitionInterpolator: new LinearInterpolator([\"pitch\"]),\n        transitionDuration: 1000,\n        pitch: 0,\n        bearing: this.mapViewPort.bearing,\n      };\n      this.mapViewPort = newViewport;\n    }\n  }\n\n  @action setDataPanelModel(model: any) {\n    this.dataPanelContent = model;\n  }\n\n  @action updateSearchDate(newDate: any) {\n    this.dateFilter =\n      newDate.getFullYear() +\n      \"-\" +\n      (newDate.getMonth() + 1) +\n      \"-\" +\n      newDate.getDate();\n  }\n\n  @action updateSearchStatus(newStatus: any) {\n    this.statusFilter = newStatus;\n  }\n\n  @action updateSearchText(newText: any) {\n    this.textFilter = newText;\n  }\n\n  //Change Map view port\n  @action updateMapViewport(newViewport: any) {\n    this.mapViewPort = newViewport;\n    var viewport = new WebMercatorViewport(newViewport);\n    const vwportState = [] as any;\n    vwportState.push(\n      viewport.unproject([0, viewport.height]),\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height])\n    );\n    this.viewportCoordinates = vwportState;\n  }\n\n  //Get list of models\n  @action async getModelList() {\n    let newAssets: any[] = [];\n    this.assets = [];\n    this.assetsLoadingState = true;\n\n    try {\n      if (this.useDynamicAssets) {\n        const dynamicAssets = await apiService.getAssetsListAsync(\n          this.viewportCoordinates,\n          this.statusFilter,\n          this.textFilter,\n          this.dateFilter\n        );\n        if (dynamicAssets != null && dynamicAssets != []){\n          newAssets = newAssets.concat(dynamicAssets);\n        }\n      }\n\n      if (this.useStaticAssets) {\n        const staticAssets = await apiService.getAssetsListAsyncStatic();\n        newAssets = newAssets.concat(staticAssets);\n      }\n\n      this.assets = newAssets.filter(function (el : any) {\n        return 'geometry' in el \n      });\n\n      this.assetsLoadingState = false;\n    } catch {\n      this.assetsLoadingState = false;\n      this.errorState = true;\n    }\n    this.refreshFilters();\n  }\n\n  @action async refeshConnectivityLayer() {\n    this.getConnectivityLayer(this.viewportCoordinates);\n  }\n\n  //Get list of connectivity layers\n  @action async getConnectivityLayer(viewData: Array<Array<number>>) {\n    const response: Object = await apiService.getConnectivtyDataAsync(viewData);\n    const stagedData: Object = await apiService.getStagedConnectivtyDataAsync();\n    runInAction(() => {\n      this.formatConnectivityData(response);\n      this.formatStagedConnectivityData(stagedData);\n    });\n  }\n\n  @action async formatConnectivityData(data: Object) {\n    const subnetLines: any = [];\n    const electricDevices: any = [];\n    // eslint-disable-next-line\n    Object.entries(data).map((x: any) => {\n      switch (x[0]) {\n        case \"100\": //electric devices\n        // eslint-disable-next-line\n          x[1].features.map((eleDevices: any) => {\n            const lay = [eleDevices.geometry[\"x\"], eleDevices.geometry[\"y\"]];\n            electricDevices.push([lay]);\n          });\n          this.electricDevicesLayer = electricDevices || null;\n          break;\n        case \"105\": //electric assemblies\n          break;\n        case \"110\": //electric junction\n          break;\n        case \"115\": //electric lines\n          break;\n        case \"903\": // electric sublines\n        case \"120\":\n          // eslint-disable-next-line\n          x[1].features.map((subnet: any) => {\n            // eslint-disable-next-line\n            subnet.geometry.paths.map((individualPath: any) => {\n              const lay = individualPath.reduce((pV: any, cV: any) => {\n                return [...pV, [cV[0], cV[1], 8.6]];\n              }, []);\n              subnetLines.push([lay]);\n            });\n          });\n          this.subNetConectivity = subnetLines || null;\n          break;\n        case \"900\": // structure junction\n          break;\n        case \"905\": // structure line\n          break;\n        case \"910\": // structure boundary\n          break;\n      }\n    });\n  }\n\n  @action async formatStagedConnectivityData(data: Object) {\n    const subnetStagedLines: any = [];\n    // eslint-disable-next-line\n    Object.entries(data).map((x: any) => {\n      switch (x[0]) {\n        case \"0\": // points\n          break;\n        case \"1\": //lines\n        // eslint-disable-next-line\n          x[1].features.map((subnet: any) => {\n            // eslint-disable-next-line\n            subnet.geometry.paths.map((individualPath: any) => {\n              const lay = individualPath.reduce((pV: any, cV: any) => {\n                return [...pV, [cV[0], cV[1], 8.6]];\n              }, []);\n              subnetStagedLines.push([lay]);\n            });\n          });\n          this.stagedConnectivityData = subnetStagedLines || null;\n          break;\n        case \"2\": //electric junction\n          break;\n      }\n    });\n  }\n\n  //Model selected in menu\n  //Updates viewport and renders models near selected model\n  @action async setSelectedModel(model: any) {\n    const newViewport = {\n      width: \"fit\",\n      height: \"100vh\",\n      longitude: model.geometry.X,\n      latitude: model.geometry.Y,\n      zoom: 18,\n      transitionInterpolator: new FlyToInterpolator({ speed: 3 }),\n      transitionDuration: \"auto\",\n      pitch: 0,\n      bearing: 0,\n    };\n    this.mapViewPort = newViewport;\n    this.setDataPanelModel(model);\n  }\n\n  @action async setMapStyle(map: any) {\n    this.mapStyle = map;\n  }\n\n  @action async setConnectivityModel(data: any) {\n    /**\n     * we need to convert the double linked list from the API response to\n     * a slightly more complext object. This data format takes a line first apporach.\n     * Null nodes can be discarded and from <-> to relationships must be specifically\n     * defined\n     *\n     * Data format:\n     * [\n     *   {\n     *     from: {\n     *       coordinates: [-122.269029, 37.80787]\n     *     },\n     *     to: {\n     *       coordinates: [-122.271604, 37.803664]\n     *   },\n     * ]\n     *\n     */\n    // eslint-disable-next-line\n    let finalArray: any = [];\n    const filteredData = data.filter(\n      (x: any) =>\n        x.from_id != null && x.to_id != null && x.is_connected === true\n    );\n    // eslint-disable-next-line\n    filteredData.map((obj: any) => {\n      const derivedObjectFrom = {\n        from: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.from_id).longitude,\n            data.find((element: any) => element.id === obj.from_id).latitude,\n          ],\n        },\n        to: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.id).longitude,\n            data.find((element: any) => element.id === obj.id).latitude,\n          ],\n        },\n      };\n      const derivedObjectTo = {\n        from: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.id).longitude,\n            data.find((element: any) => element.id === obj.id).latitude,\n          ],\n        },\n        to: {\n          coordinates: [\n            data.find((element: any) => element.id === obj.to_id).longitude,\n            data.find((element: any) => element.id === obj.to_id).latitude,\n          ],\n        },\n      };\n      finalArray.push(derivedObjectTo);\n      finalArray.push(derivedObjectFrom);\n    });\n    this.connectivityData = finalArray;\n  }\n\n  //   @action async fetchCoordinatesConnectivityMock() {\n  //     /**\n  //      * Data format: pathLayer\n  //      * [\n  //      *   {\n  //      *     path: [[-122.4, 37.7], [-122.5, 37.8], [-122.6, 37.85]],\n  //      *     name: 'Richmond - Millbrae',\n  //      *     color: [255, 0, 0]\n  //      *   },\n  //      *   ...\n  //      * ]\n  //      */\n  //     const connectivityLayers: any = [];\n  //     mockConnectivityDataSubNet6.map((convertedLayers: any) => {\n  //       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n  //         const x = [cV.x, cV.y];\n  //         return [...pV, x];\n  //       }, []);\n  //       connectivityLayers.push([lay]);\n  //     });\n  //     mockConnectivityDataSubNet7.map((convertedLayers: any) => {\n  //       const lay = convertedLayers.geometries.reduce((pV: any, cV: any) => {\n  //         const x = [cV.x, cV.y];\n  //         return [...pV, x];\n  //       }, []);\n  //       connectivityLayers.push([lay]);\n  //     });\n  //     this.subNetConectivity = connectivityLayers || null;\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}