{"ast":null,"code":"var _jsxFileName = \"/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/src/webGL/control-panel.js\";\nimport React, { PureComponent } from \"react\";\nimport { fromJS } from \"immutable\";\nimport MAP_STYLE from \"../map-style-basic-v8.json\";\nimport { inject, observer } from \"mobx-react\";\nimport Materialize from \"materialize-css\";\nconst defaultMapStyle = fromJS(MAP_STYLE);\nconst categories = [\"labels\", \"roads\", \"buildings\", \"parks\", \"water\", \"background\", \"connectivity\", \"models\"]; // Layer id patterns by category\n\nconst layerSelector = {\n  background: /background/,\n  water: /water/,\n  parks: /park/,\n  buildings: /building/,\n  roads: /bridge|road|tunnel/,\n  labels: /label|place|poi/,\n  connectivity: /trips-layer/,\n  models: /model-layer/\n}; // Layer color class by type\n\nconst colorClass = {\n  line: \"line-color\",\n  fill: \"fill-color\",\n  background: \"background-color\",\n  symbol: \"text-color\"\n};\n\nclass StyleControls extends PureComponent {\n  constructor(props) {\n    super(props);\n    this._defaultLayers = defaultMapStyle.get(\"layers\");\n    this.state = {\n      visibility: {\n        water: true,\n        parks: true,\n        buildings: true,\n        roads: true,\n        labels: true,\n        background: true,\n        connectivity: false,\n        models: true\n      },\n      color: {\n        water: \"#DBE2E6\",\n        parks: \"#E6EAE9\",\n        buildings: \"#c0c0c8\",\n        roads: \"#ffffff\",\n        labels: \"#78888a\",\n        background: \"#EBF0F0\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._updateMapStyle(this.state);\n\n    Materialize.Modal.init(document.querySelectorAll(\".modal\"));\n    Materialize.Tooltip.init(document.querySelectorAll(\".tooltipped\"));\n  }\n\n  _onColorChange(name, event) {\n    const color = { ...this.state.color,\n      [name]: event.target.value\n    };\n    this.setState({\n      color\n    });\n\n    this._updateMapStyle({ ...this.state,\n      color\n    });\n  }\n\n  _onVisibilityChange(name, event) {\n    const visibility = { ...this.state.visibility,\n      [name]: event.target.checked\n    };\n    this.setState({\n      visibility\n    });\n\n    this._updateMapStyle({ ...this.state,\n      visibility\n    });\n\n    this.props.toggleParent(name, event.target.checked);\n  }\n\n  _updateMapStyle({\n    visibility,\n    color\n  }) {\n    const layers = this._defaultLayers.filter(layer => {\n      const id = layer.get(\"id\");\n      return categories.every(name => visibility[name] || !layerSelector[name].test(id));\n    }).map(layer => {\n      const id = layer.get(\"id\");\n      const type = layer.get(\"type\");\n      const category = categories.find(name => layerSelector[name].test(id));\n\n      if (category && colorClass[type]) {\n        return layer.setIn([\"paint\", colorClass[type]], color[category]);\n      }\n\n      return layer;\n    });\n\n    this.props.setMapStyle(defaultMapStyle.set(\"layers\", layers));\n  }\n\n  _renderLayerControl(name) {\n    const {\n      visibility,\n      color\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"input \",\n      width: \"200%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"col s2 m2 l2\",\n      type: \"checkbox\",\n      checked: visibility[name],\n      onChange: this._onVisibilityChange.bind(this, name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"col s7 m7 l4 center-aligned center offset-m1 offset-l3 offset-s1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, name), name === \"connectivity\" || name === \"models\" ? null : /*#__PURE__*/React.createElement(\"input\", {\n      className: \"col s2 m2 l1\",\n      type: \"color\",\n      value: color[name],\n      disabled: !visibility[name],\n      onChange: this._onColorChange.bind(this, name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"modal1\",\n      className: \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"layers-modal-header black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"white-text center-align\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, \"Edit Layers\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-content container center-align\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, categories.map(name => this._renderLayerControl(name))))));\n  }\n\n}\n\nexport default inject(\"store\")(observer(StyleControls));","map":{"version":3,"sources":["/Users/jay_lohokare/Desktop/PPL Codes/webgl-3d-web/src/webGL/control-panel.js"],"names":["React","PureComponent","fromJS","MAP_STYLE","inject","observer","Materialize","defaultMapStyle","categories","layerSelector","background","water","parks","buildings","roads","labels","connectivity","models","colorClass","line","fill","symbol","StyleControls","constructor","props","_defaultLayers","get","state","visibility","color","componentDidMount","_updateMapStyle","Modal","init","document","querySelectorAll","Tooltip","_onColorChange","name","event","target","value","setState","_onVisibilityChange","checked","toggleParent","layers","filter","layer","id","every","test","map","type","category","find","setIn","setMapStyle","set","_renderLayerControl","bind","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { fromJS } from \"immutable\";\nimport MAP_STYLE from \"../map-style-basic-v8.json\";\nimport { inject, observer } from \"mobx-react\";\nimport Materialize from \"materialize-css\";\n\nconst defaultMapStyle = fromJS(MAP_STYLE);\nconst categories = [\n  \"labels\",\n  \"roads\",\n  \"buildings\",\n  \"parks\",\n  \"water\",\n  \"background\",\n  \"connectivity\",\n  \"models\",\n];\n\n// Layer id patterns by category\nconst layerSelector = {\n  background: /background/,\n  water: /water/,\n  parks: /park/,\n  buildings: /building/,\n  roads: /bridge|road|tunnel/,\n  labels: /label|place|poi/,\n  connectivity: /trips-layer/,\n  models: /model-layer/,\n};\n\n// Layer color class by type\nconst colorClass = {\n  line: \"line-color\",\n  fill: \"fill-color\",\n  background: \"background-color\",\n  symbol: \"text-color\",\n};\n\nclass StyleControls extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this._defaultLayers = defaultMapStyle.get(\"layers\");\n\n    this.state = {\n      visibility: {\n        water: true,\n        parks: true,\n        buildings: true,\n        roads: true,\n        labels: true,\n        background: true,\n        connectivity: false,\n        models: true,\n      },\n      color: {\n        water: \"#DBE2E6\",\n        parks: \"#E6EAE9\",\n        buildings: \"#c0c0c8\",\n        roads: \"#ffffff\",\n        labels: \"#78888a\",\n        background: \"#EBF0F0\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this._updateMapStyle(this.state);\n\n    Materialize.Modal.init(document.querySelectorAll(\".modal\"));\n    Materialize.Tooltip.init(document.querySelectorAll(\".tooltipped\"));\n  }\n\n  _onColorChange(name, event) {\n    const color = { ...this.state.color, [name]: event.target.value };\n    this.setState({ color });\n    this._updateMapStyle({ ...this.state, color });\n  }\n\n  _onVisibilityChange(name, event) {\n    const visibility = {\n      ...this.state.visibility,\n      [name]: event.target.checked,\n    };\n    this.setState({ visibility });\n    this._updateMapStyle({ ...this.state, visibility });\n    this.props.toggleParent(name, event.target.checked);\n  }\n\n  _updateMapStyle({ visibility, color }) {\n    const layers = this._defaultLayers\n      .filter((layer) => {\n        const id = layer.get(\"id\");\n        return categories.every(\n          (name) => visibility[name] || !layerSelector[name].test(id)\n        );\n      })\n      .map((layer) => {\n        const id = layer.get(\"id\");\n        const type = layer.get(\"type\");\n        const category = categories.find((name) =>\n          layerSelector[name].test(id)\n        );\n        if (category && colorClass[type]) {\n          return layer.setIn([\"paint\", colorClass[type]], color[category]);\n        }\n        return layer;\n      });\n    this.props.setMapStyle(defaultMapStyle.set(\"layers\", layers));\n  }\n\n  _renderLayerControl(name) {\n    const { visibility, color } = this.state;\n    return (\n      <div key={name}>\n        <label className=\"input \" width=\"200%\">\n          <div className=\"row\">\n            <input\n              className=\"col s2 m2 l2\"\n              type=\"checkbox\"\n              checked={visibility[name]}\n              onChange={this._onVisibilityChange.bind(this, name)}\n            />\n\n            <span className=\"col s7 m7 l4 center-aligned center offset-m1 offset-l3 offset-s1\">\n              {name}\n            </span>\n\n            {name === \"connectivity\" || name === \"models\" ? null : (\n              <input\n                className=\"col s2 m2 l1\"\n                type=\"color\"\n                value={color[name]}\n                disabled={!visibility[name]}\n                onChange={this._onColorChange.bind(this, name)}\n              />\n            )}\n          </div>\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <div id=\"modal1\" className=\"modal\">\n          <div className=\"layers-modal-header black\">\n            <h4 className=\"white-text center-align\">Edit Layers</h4>\n          </div>\n          <div className=\"modal-content container center-align\">\n            <div>\n              {categories.map((name) => this._renderLayerControl(name))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default inject(\"store\")(observer(StyleControls));\n"]},"metadata":{},"sourceType":"module"}