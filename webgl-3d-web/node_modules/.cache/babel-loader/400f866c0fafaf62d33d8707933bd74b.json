{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { getMeshBoundingBox } from '@loaders.gl/loader-utils';\nimport parseOBJ from './parse-obj';\nexport default function loadOBJ(text, options) {\n  var _parseOBJ = parseOBJ(text),\n      meshes = _parseOBJ.meshes;\n\n  var vertexCount = meshes.reduce(function (s, mesh) {\n    return s + mesh.header.vertexCount;\n  }, 0);\n  var attributes = mergeAttributes(meshes, vertexCount);\n  return {\n    loaderData: {\n      header: {}\n    },\n    header: {\n      vertexCount: vertexCount,\n      boundingBox: getMeshBoundingBox(attributes)\n    },\n    mode: 4,\n    attributes: attributes\n  };\n}\n\nfunction mergeAttributes(meshes, vertexCount) {\n  var positions = new Float32Array(vertexCount * 3);\n  var normals;\n  var colors;\n  var uvs;\n  var i = 0;\n\n  var _iterator = _createForOfIteratorHelper(meshes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var mesh = _step.value;\n      var _mesh$attributes = mesh.attributes,\n          POSITION = _mesh$attributes.POSITION,\n          NORMAL = _mesh$attributes.NORMAL,\n          COLOR_0 = _mesh$attributes.COLOR_0,\n          TEXCOORD_0 = _mesh$attributes.TEXCOORD_0;\n      positions.set(POSITION.value, i * 3);\n\n      if (NORMAL) {\n        normals = normals || new Float32Array(vertexCount * 3);\n        normals.set(NORMAL.value, i * 3);\n      }\n\n      if (COLOR_0) {\n        colors = colors || new Float32Array(vertexCount * 3);\n        colors.set(COLOR_0.value, i * 3);\n      }\n\n      if (TEXCOORD_0) {\n        uvs = uvs || new Float32Array(vertexCount * 2);\n        uvs.set(TEXCOORD_0.value, i * 2);\n      }\n\n      i += POSITION.value.length / 3;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var attributes = {};\n  attributes.POSITION = {\n    value: positions,\n    size: 3\n  };\n\n  if (normals) {\n    attributes.NORMAL = {\n      value: normals,\n      size: 3\n    };\n  }\n\n  if (colors) {\n    attributes.COLOR_0 = {\n      value: colors,\n      size: 3\n    };\n  }\n\n  if (uvs) {\n    attributes.TEXCOORD_0 = {\n      value: uvs,\n      size: 2\n    };\n  }\n\n  return attributes;\n}","map":{"version":3,"sources":["../../../src/lib/load-obj.js"],"names":["meshes","parseOBJ","vertexCount","s","mesh","attributes","mergeAttributes","loaderData","header","boundingBox","getMeshBoundingBox","mode","positions","i","POSITION","NORMAL","COLOR_0","TEXCOORD_0","normals","colors","uvs","value","size"],"mappings":"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","sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/loader-utils';\nimport parseOBJ from './parse-obj';\n\nexport default function loadOBJ(text, options) {\n  const {meshes} = parseOBJ(text);\n\n  const vertexCount = meshes.reduce((s, mesh) => s + mesh.header.vertexCount, 0);\n  // TODO - render objects separately\n  const attributes = mergeAttributes(meshes, vertexCount);\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    // Normalised data\n    header: {\n      vertexCount,\n      boundingBox: getMeshBoundingBox(attributes)\n    },\n    mode: 4, // TRIANGLES\n\n    attributes\n  };\n}\n\n// eslint-disable-next-line max-statements\nfunction mergeAttributes(meshes, vertexCount) {\n  const positions = new Float32Array(vertexCount * 3);\n  let normals;\n  let colors;\n  let uvs;\n  let i = 0;\n\n  for (const mesh of meshes) {\n    const {POSITION, NORMAL, COLOR_0, TEXCOORD_0} = mesh.attributes;\n\n    positions.set(POSITION.value, i * 3);\n\n    if (NORMAL) {\n      normals = normals || new Float32Array(vertexCount * 3);\n      normals.set(NORMAL.value, i * 3);\n    }\n    if (COLOR_0) {\n      colors = colors || new Float32Array(vertexCount * 3);\n      colors.set(COLOR_0.value, i * 3);\n    }\n    if (TEXCOORD_0) {\n      uvs = uvs || new Float32Array(vertexCount * 2);\n      uvs.set(TEXCOORD_0.value, i * 2);\n    }\n\n    i += POSITION.value.length / 3;\n  }\n\n  const attributes = {};\n  attributes.POSITION = {value: positions, size: 3};\n\n  if (normals) {\n    attributes.NORMAL = {value: normals, size: 3};\n  }\n  if (colors) {\n    attributes.COLOR_0 = {value: colors, size: 3};\n  }\n  if (uvs) {\n    attributes.TEXCOORD_0 = {value: uvs, size: 2};\n  }\n\n  return attributes;\n}\n"]},"metadata":{},"sourceType":"module"}